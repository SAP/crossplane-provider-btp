//go:build e2e

// Code initially generated by test-generator.

package e2e

import (
	"context"
	"testing"
	"time"

	"github.com/sap/crossplane-provider-btp/apis/account/v1alpha1"

	"github.com/crossplane-contrib/xp-testing/pkg/resources"
	meta_api "github.com/sap/crossplane-provider-btp/apis"
	res "sigs.k8s.io/e2e-framework/klient/k8s/resources"
	"sigs.k8s.io/e2e-framework/klient/wait"
	"sigs.k8s.io/e2e-framework/pkg/envconf"
	"sigs.k8s.io/e2e-framework/pkg/features"
)

func Test_DirectoryEntitlement_v1alpha1(t *testing.T) {
	t.Parallel()

	resource := resources.ResourceTestConfig{
		Kind:              "DirectoryEntitlement",
		ResourceDirectory: "testdata/crs/DirectoryEntitlement",
	}

	fB := features.New(resource.Kind)
	fB.WithLabel("kind", resource.Kind)
	fB.Setup(
		func(ctx context.Context, t *testing.T, cfg *envconf.Config) context.Context {
			// as soon as we move to use the xp-testing framework, we can remove this manually setup and use the preconfigured one
			r, _ := res.New(cfg.Client().RESTConfig())
			_ = meta_api.AddToScheme(r.GetScheme())

			t.Logf("Apply %s", resource.Kind)
			resources.ImportResources(ctx, t, cfg, resource.ResourceDirectory)

			return ctx
		},
	)
	fB.Assess("create",
		func(ctx context.Context, t *testing.T, cfg *envconf.Config) context.Context {
			if err := resources.WaitForResourcesToBeSynced(ctx, cfg, resource.ResourceDirectory, nil, wait.WithTimeout(time.Minute*7)); err != nil {
				resources.DumpManagedResources(ctx, t, cfg)
				t.Fatal(err)
			}
			return ctx
		},
	)
	fB.Assess("delete", func(ctx context.Context, t *testing.T, cfg *envconf.Config) context.Context {
		// since we do not yet have a way to cascade deletes for tf resources, we first delete those manually before the other resources
		directoryEntCis := &v1alpha1.DirectoryEntitlement{}
		MustGetResource(t, cfg, "e2e-directory-ent-cis-local", nil, directoryEntCis)
		resources.AwaitResourceDeletionOrFail(ctx, t, cfg, directoryEntCis)

		directorySql := &v1alpha1.DirectoryEntitlement{}
		MustGetResource(t, cfg, "e2e-audit-log-viewer-ent", nil, directorySql)
		resources.AwaitResourceDeletionOrFail(ctx, t, cfg, directorySql)

		return DeleteResourcesIgnoreMissing(ctx, t, cfg, resource.Kind, wait.WithTimeout(time.Minute*5))
	})

	fB.Teardown(resource.Teardown)

	testenv.TestInParallel(t, fB.Feature())
}
