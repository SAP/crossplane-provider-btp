/*
Provisioning Service

The Provisioning service provides REST APIs that are responsible for the provisioning and deprovisioning of environment instances and tenants in the corresponding region.  Provisioning is performed after validation by the Entitlements service. Use the APIs in this service to manage and create environment instances, such as a Cloud Foundry org, in a subaccount and to retrieve the plans and quota assignments for a subaccount.  See also: * [Authorization](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/3670474a58c24ac2b082e76cbbd9dc19.html) * [Rate Limiting](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77b217b3f57a45b987eb7fbc3305ce1e.html) * [Error Response Format](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77fef2fb104b4b1795e2e6cee790e8b8.html) * [Asynchronous Jobs](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/0a0a6ab0ad114d72a6611c1c6b21683e.html)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdateEnvironmentInstanceRequestPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateEnvironmentInstanceRequestPayload{}

// UpdateEnvironmentInstanceRequestPayload JSON object with configuration parameters specific to environment instance.
type UpdateEnvironmentInstanceRequestPayload struct {
	// If needed, you can pass environment-specific configuration parameters using a valid embedded JSON object. For a list of supported configuration parameters, see the documentation of the particular environment offering. In this example, additional configuration parameter 'instance_name' is specified:  {  \"instance_name\": \"myOrg\"  }
	Parameters map[string]interface{} `json:"parameters,omitempty"`
	// Name of the service plan for the environment instance. Must match the name in the corresponding service broker's catalog. (for example: Subscription)
	PlanName string `json:"planName"`
}

type _UpdateEnvironmentInstanceRequestPayload UpdateEnvironmentInstanceRequestPayload

// NewUpdateEnvironmentInstanceRequestPayload instantiates a new UpdateEnvironmentInstanceRequestPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateEnvironmentInstanceRequestPayload(planName string) *UpdateEnvironmentInstanceRequestPayload {
	this := UpdateEnvironmentInstanceRequestPayload{}
	this.PlanName = planName
	return &this
}

// NewUpdateEnvironmentInstanceRequestPayloadWithDefaults instantiates a new UpdateEnvironmentInstanceRequestPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateEnvironmentInstanceRequestPayloadWithDefaults() *UpdateEnvironmentInstanceRequestPayload {
	this := UpdateEnvironmentInstanceRequestPayload{}
	return &this
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *UpdateEnvironmentInstanceRequestPayload) GetParameters() map[string]interface{} {
	if o == nil || IsNil(o.Parameters) {
		var ret map[string]interface{}
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEnvironmentInstanceRequestPayload) GetParametersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Parameters) {
		return map[string]interface{}{}, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *UpdateEnvironmentInstanceRequestPayload) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]interface{} and assigns it to the Parameters field.
func (o *UpdateEnvironmentInstanceRequestPayload) SetParameters(v map[string]interface{}) {
	o.Parameters = v
}

// GetPlanName returns the PlanName field value
func (o *UpdateEnvironmentInstanceRequestPayload) GetPlanName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlanName
}

// GetPlanNameOk returns a tuple with the PlanName field value
// and a boolean to check if the value has been set.
func (o *UpdateEnvironmentInstanceRequestPayload) GetPlanNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlanName, true
}

// SetPlanName sets field value
func (o *UpdateEnvironmentInstanceRequestPayload) SetPlanName(v string) {
	o.PlanName = v
}

func (o UpdateEnvironmentInstanceRequestPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateEnvironmentInstanceRequestPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	toSerialize["planName"] = o.PlanName
	return toSerialize, nil
}

func (o *UpdateEnvironmentInstanceRequestPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"planName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateEnvironmentInstanceRequestPayload := _UpdateEnvironmentInstanceRequestPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateEnvironmentInstanceRequestPayload)

	if err != nil {
		return err
	}

	*o = UpdateEnvironmentInstanceRequestPayload(varUpdateEnvironmentInstanceRequestPayload)

	return err
}

type NullableUpdateEnvironmentInstanceRequestPayload struct {
	value *UpdateEnvironmentInstanceRequestPayload
	isSet bool
}

func (v NullableUpdateEnvironmentInstanceRequestPayload) Get() *UpdateEnvironmentInstanceRequestPayload {
	return v.value
}

func (v *NullableUpdateEnvironmentInstanceRequestPayload) Set(val *UpdateEnvironmentInstanceRequestPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateEnvironmentInstanceRequestPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateEnvironmentInstanceRequestPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateEnvironmentInstanceRequestPayload(val *UpdateEnvironmentInstanceRequestPayload) *NullableUpdateEnvironmentInstanceRequestPayload {
	return &NullableUpdateEnvironmentInstanceRequestPayload{value: val, isSet: true}
}

func (v NullableUpdateEnvironmentInstanceRequestPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateEnvironmentInstanceRequestPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
