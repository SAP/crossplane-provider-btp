/*
Provisioning Service

The Provisioning service provides REST APIs that are responsible for the provisioning and deprovisioning of environment instances and tenants in the corresponding region.  Provisioning is performed after validation by the Entitlements service. Use the APIs in this service to manage and create environment instances, such as a Cloud Foundry org, in a subaccount and to retrieve the plans and quota assignments for a subaccount.  See also: * [Authorization](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/3670474a58c24ac2b082e76cbbd9dc19.html) * [Rate Limiting](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77b217b3f57a45b987eb7fbc3305ce1e.html) * [Error Response Format](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77fef2fb104b4b1795e2e6cee790e8b8.html) * [Asynchronous Jobs](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/0a0a6ab0ad114d72a6611c1c6b21683e.html)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// GetEnvironmentInstanceBinding200Response - struct for GetEnvironmentInstanceBinding200Response
type GetEnvironmentInstanceBinding200Response struct {
	EnvironmentInstanceBindingMetadata    *EnvironmentInstanceBindingMetadata
	GetEnvironmentInstanceBindingResponse *GetEnvironmentInstanceBindingResponse
}

// EnvironmentInstanceBindingMetadataAsGetEnvironmentInstanceBinding200Response is a convenience function that returns EnvironmentInstanceBindingMetadata wrapped in GetEnvironmentInstanceBinding200Response
func EnvironmentInstanceBindingMetadataAsGetEnvironmentInstanceBinding200Response(v *EnvironmentInstanceBindingMetadata) GetEnvironmentInstanceBinding200Response {
	return GetEnvironmentInstanceBinding200Response{
		EnvironmentInstanceBindingMetadata: v,
	}
}

// GetEnvironmentInstanceBindingResponseAsGetEnvironmentInstanceBinding200Response is a convenience function that returns GetEnvironmentInstanceBindingResponse wrapped in GetEnvironmentInstanceBinding200Response
func GetEnvironmentInstanceBindingResponseAsGetEnvironmentInstanceBinding200Response(v *GetEnvironmentInstanceBindingResponse) GetEnvironmentInstanceBinding200Response {
	return GetEnvironmentInstanceBinding200Response{
		GetEnvironmentInstanceBindingResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetEnvironmentInstanceBinding200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EnvironmentInstanceBindingMetadata
	err = newStrictDecoder(data).Decode(&dst.EnvironmentInstanceBindingMetadata)
	if err == nil {
		jsonEnvironmentInstanceBindingMetadata, _ := json.Marshal(dst.EnvironmentInstanceBindingMetadata)
		if string(jsonEnvironmentInstanceBindingMetadata) == "{}" { // empty struct
			dst.EnvironmentInstanceBindingMetadata = nil
		} else {
			if err = validator.Validate(dst.EnvironmentInstanceBindingMetadata); err != nil {
				dst.EnvironmentInstanceBindingMetadata = nil
			} else {
				match++
			}
		}
	} else {
		dst.EnvironmentInstanceBindingMetadata = nil
	}

	// try to unmarshal data into GetEnvironmentInstanceBindingResponse
	err = newStrictDecoder(data).Decode(&dst.GetEnvironmentInstanceBindingResponse)
	if err == nil {
		jsonGetEnvironmentInstanceBindingResponse, _ := json.Marshal(dst.GetEnvironmentInstanceBindingResponse)
		if string(jsonGetEnvironmentInstanceBindingResponse) == "{}" { // empty struct
			dst.GetEnvironmentInstanceBindingResponse = nil
		} else {
			if err = validator.Validate(dst.GetEnvironmentInstanceBindingResponse); err != nil {
				dst.GetEnvironmentInstanceBindingResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetEnvironmentInstanceBindingResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EnvironmentInstanceBindingMetadata = nil
		dst.GetEnvironmentInstanceBindingResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetEnvironmentInstanceBinding200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetEnvironmentInstanceBinding200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetEnvironmentInstanceBinding200Response) MarshalJSON() ([]byte, error) {
	if src.EnvironmentInstanceBindingMetadata != nil {
		return json.Marshal(&src.EnvironmentInstanceBindingMetadata)
	}

	if src.GetEnvironmentInstanceBindingResponse != nil {
		return json.Marshal(&src.GetEnvironmentInstanceBindingResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetEnvironmentInstanceBinding200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.EnvironmentInstanceBindingMetadata != nil {
		return obj.EnvironmentInstanceBindingMetadata
	}

	if obj.GetEnvironmentInstanceBindingResponse != nil {
		return obj.GetEnvironmentInstanceBindingResponse
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj GetEnvironmentInstanceBinding200Response) GetActualInstanceValue() interface{} {
	if obj.EnvironmentInstanceBindingMetadata != nil {
		return *obj.EnvironmentInstanceBindingMetadata
	}

	if obj.GetEnvironmentInstanceBindingResponse != nil {
		return *obj.GetEnvironmentInstanceBindingResponse
	}

	// all schemas are nil
	return nil
}

type NullableGetEnvironmentInstanceBinding200Response struct {
	value *GetEnvironmentInstanceBinding200Response
	isSet bool
}

func (v NullableGetEnvironmentInstanceBinding200Response) Get() *GetEnvironmentInstanceBinding200Response {
	return v.value
}

func (v *NullableGetEnvironmentInstanceBinding200Response) Set(val *GetEnvironmentInstanceBinding200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEnvironmentInstanceBinding200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEnvironmentInstanceBinding200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEnvironmentInstanceBinding200Response(val *GetEnvironmentInstanceBinding200Response) *NullableGetEnvironmentInstanceBinding200Response {
	return &NullableGetEnvironmentInstanceBinding200Response{value: val, isSet: true}
}

func (v NullableGetEnvironmentInstanceBinding200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEnvironmentInstanceBinding200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
