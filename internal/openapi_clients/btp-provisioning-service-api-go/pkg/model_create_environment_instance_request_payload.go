/*
Provisioning Service

The Provisioning service provides REST APIs that are responsible for the provisioning and deprovisioning of environment instances and tenants in the corresponding region.  Provisioning is performed after validation by the Entitlements service. Use the APIs in this service to manage and create environment instances, such as a Cloud Foundry org, in a subaccount and to retrieve the plans and quota assignments for a subaccount.  See also: * [Authorization](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/3670474a58c24ac2b082e76cbbd9dc19.html) * [Rate Limiting](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77b217b3f57a45b987eb7fbc3305ce1e.html) * [Error Response Format](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77fef2fb104b4b1795e2e6cee790e8b8.html) * [Asynchronous Jobs](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/0a0a6ab0ad114d72a6611c1c6b21683e.html)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateEnvironmentInstanceRequestPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateEnvironmentInstanceRequestPayload{}

// CreateEnvironmentInstanceRequestPayload JSON object with configuration parameters specific to environment instance binding.
type CreateEnvironmentInstanceRequestPayload struct {
	// The description of the environment instance.
	Description *string `json:"description,omitempty"`
	// Type of the environment instance that is used. Must match the type of the environment instance broker (for example: cloudfoundry). Use GET /provisioning/v1/availableEnvironments to view the valid values.
	EnvironmentType string `json:"environmentType"`
	// The name of the landscape within the logged-in region on which to create the environment instance. Only required only if the region has multiple landscapes. To see which landscapes are available for this environment, use the GET /provisioning/v1/availableEnvironments API.
	LandscapeLabel *string `json:"landscapeLabel,omitempty"`
	// The name of the created environment instance.
	Name *string `json:"name,omitempty"`
	// The origin of the user in case of a custom IdP configuration. This parameter is only required if the OAuth 2.0 client credentials grant flow is used, a user parameter is provided and the target environment supports custom IdP, otherwise it is ignored.
	Origin *string `json:"origin,omitempty"`
	// If needed, you can pass environment-specific configuration parameters using a valid embedded JSON object. For a list of supported configuration parameters, see the documentation of the particular environment offering. In this example, additional configuration parameters 'id' and 'email' are specified:  {  \"instance_name\": \"myOrg\"  }
	Parameters map[string]interface{} `json:"parameters,omitempty"`
	// Name of the service plan for the environment instance. Must match the name in the corresponding service broker's catalog. (for example: standard)
	PlanName string `json:"planName"`
	// The name of service offered in the catalog of the corresponding environment broker. (for example: cloudfoundry)
	ServiceName string `json:"serviceName"`
	// Technical key of the corresponding environment broker.
	TechnicalKey *string `json:"technicalKey,omitempty"`
	// The e-mail of the user that owns the environment instance. In some environments, this user might be assigned as the initial admin of the provisioned environment. For example, for a Cloud Foundry environment, this user is assigned to the Org Manager role. This parameter is required only when OAuth 2.0 client credentials grant flow is used, otherwise it is ignored.
	User *string `json:"user,omitempty"`
}

type _CreateEnvironmentInstanceRequestPayload CreateEnvironmentInstanceRequestPayload

// NewCreateEnvironmentInstanceRequestPayload instantiates a new CreateEnvironmentInstanceRequestPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateEnvironmentInstanceRequestPayload(environmentType string, planName string, serviceName string) *CreateEnvironmentInstanceRequestPayload {
	this := CreateEnvironmentInstanceRequestPayload{}
	this.EnvironmentType = environmentType
	this.PlanName = planName
	this.ServiceName = serviceName
	return &this
}

// NewCreateEnvironmentInstanceRequestPayloadWithDefaults instantiates a new CreateEnvironmentInstanceRequestPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateEnvironmentInstanceRequestPayloadWithDefaults() *CreateEnvironmentInstanceRequestPayload {
	this := CreateEnvironmentInstanceRequestPayload{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateEnvironmentInstanceRequestPayload) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEnvironmentInstanceRequestPayload) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateEnvironmentInstanceRequestPayload) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateEnvironmentInstanceRequestPayload) SetDescription(v string) {
	o.Description = &v
}

// GetEnvironmentType returns the EnvironmentType field value
func (o *CreateEnvironmentInstanceRequestPayload) GetEnvironmentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentType
}

// GetEnvironmentTypeOk returns a tuple with the EnvironmentType field value
// and a boolean to check if the value has been set.
func (o *CreateEnvironmentInstanceRequestPayload) GetEnvironmentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentType, true
}

// SetEnvironmentType sets field value
func (o *CreateEnvironmentInstanceRequestPayload) SetEnvironmentType(v string) {
	o.EnvironmentType = v
}

// GetLandscapeLabel returns the LandscapeLabel field value if set, zero value otherwise.
func (o *CreateEnvironmentInstanceRequestPayload) GetLandscapeLabel() string {
	if o == nil || IsNil(o.LandscapeLabel) {
		var ret string
		return ret
	}
	return *o.LandscapeLabel
}

// GetLandscapeLabelOk returns a tuple with the LandscapeLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEnvironmentInstanceRequestPayload) GetLandscapeLabelOk() (*string, bool) {
	if o == nil || IsNil(o.LandscapeLabel) {
		return nil, false
	}
	return o.LandscapeLabel, true
}

// HasLandscapeLabel returns a boolean if a field has been set.
func (o *CreateEnvironmentInstanceRequestPayload) HasLandscapeLabel() bool {
	if o != nil && !IsNil(o.LandscapeLabel) {
		return true
	}

	return false
}

// SetLandscapeLabel gets a reference to the given string and assigns it to the LandscapeLabel field.
func (o *CreateEnvironmentInstanceRequestPayload) SetLandscapeLabel(v string) {
	o.LandscapeLabel = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateEnvironmentInstanceRequestPayload) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEnvironmentInstanceRequestPayload) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateEnvironmentInstanceRequestPayload) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateEnvironmentInstanceRequestPayload) SetName(v string) {
	o.Name = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *CreateEnvironmentInstanceRequestPayload) GetOrigin() string {
	if o == nil || IsNil(o.Origin) {
		var ret string
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEnvironmentInstanceRequestPayload) GetOriginOk() (*string, bool) {
	if o == nil || IsNil(o.Origin) {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *CreateEnvironmentInstanceRequestPayload) HasOrigin() bool {
	if o != nil && !IsNil(o.Origin) {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given string and assigns it to the Origin field.
func (o *CreateEnvironmentInstanceRequestPayload) SetOrigin(v string) {
	o.Origin = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *CreateEnvironmentInstanceRequestPayload) GetParameters() map[string]interface{} {
	if o == nil || IsNil(o.Parameters) {
		var ret map[string]interface{}
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEnvironmentInstanceRequestPayload) GetParametersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Parameters) {
		return map[string]interface{}{}, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *CreateEnvironmentInstanceRequestPayload) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]interface{} and assigns it to the Parameters field.
func (o *CreateEnvironmentInstanceRequestPayload) SetParameters(v map[string]interface{}) {
	o.Parameters = v
}

// GetPlanName returns the PlanName field value
func (o *CreateEnvironmentInstanceRequestPayload) GetPlanName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlanName
}

// GetPlanNameOk returns a tuple with the PlanName field value
// and a boolean to check if the value has been set.
func (o *CreateEnvironmentInstanceRequestPayload) GetPlanNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlanName, true
}

// SetPlanName sets field value
func (o *CreateEnvironmentInstanceRequestPayload) SetPlanName(v string) {
	o.PlanName = v
}

// GetServiceName returns the ServiceName field value
func (o *CreateEnvironmentInstanceRequestPayload) GetServiceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value
// and a boolean to check if the value has been set.
func (o *CreateEnvironmentInstanceRequestPayload) GetServiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceName, true
}

// SetServiceName sets field value
func (o *CreateEnvironmentInstanceRequestPayload) SetServiceName(v string) {
	o.ServiceName = v
}

// GetTechnicalKey returns the TechnicalKey field value if set, zero value otherwise.
func (o *CreateEnvironmentInstanceRequestPayload) GetTechnicalKey() string {
	if o == nil || IsNil(o.TechnicalKey) {
		var ret string
		return ret
	}
	return *o.TechnicalKey
}

// GetTechnicalKeyOk returns a tuple with the TechnicalKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEnvironmentInstanceRequestPayload) GetTechnicalKeyOk() (*string, bool) {
	if o == nil || IsNil(o.TechnicalKey) {
		return nil, false
	}
	return o.TechnicalKey, true
}

// HasTechnicalKey returns a boolean if a field has been set.
func (o *CreateEnvironmentInstanceRequestPayload) HasTechnicalKey() bool {
	if o != nil && !IsNil(o.TechnicalKey) {
		return true
	}

	return false
}

// SetTechnicalKey gets a reference to the given string and assigns it to the TechnicalKey field.
func (o *CreateEnvironmentInstanceRequestPayload) SetTechnicalKey(v string) {
	o.TechnicalKey = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *CreateEnvironmentInstanceRequestPayload) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEnvironmentInstanceRequestPayload) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *CreateEnvironmentInstanceRequestPayload) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *CreateEnvironmentInstanceRequestPayload) SetUser(v string) {
	o.User = &v
}

func (o CreateEnvironmentInstanceRequestPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateEnvironmentInstanceRequestPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["environmentType"] = o.EnvironmentType
	if !IsNil(o.LandscapeLabel) {
		toSerialize["landscapeLabel"] = o.LandscapeLabel
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Origin) {
		toSerialize["origin"] = o.Origin
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	toSerialize["planName"] = o.PlanName
	toSerialize["serviceName"] = o.ServiceName
	if !IsNil(o.TechnicalKey) {
		toSerialize["technicalKey"] = o.TechnicalKey
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

func (o *CreateEnvironmentInstanceRequestPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"environmentType",
		"planName",
		"serviceName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateEnvironmentInstanceRequestPayload := _CreateEnvironmentInstanceRequestPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateEnvironmentInstanceRequestPayload)

	if err != nil {
		return err
	}

	*o = CreateEnvironmentInstanceRequestPayload(varCreateEnvironmentInstanceRequestPayload)

	return err
}

type NullableCreateEnvironmentInstanceRequestPayload struct {
	value *CreateEnvironmentInstanceRequestPayload
	isSet bool
}

func (v NullableCreateEnvironmentInstanceRequestPayload) Get() *CreateEnvironmentInstanceRequestPayload {
	return v.value
}

func (v *NullableCreateEnvironmentInstanceRequestPayload) Set(val *CreateEnvironmentInstanceRequestPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateEnvironmentInstanceRequestPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateEnvironmentInstanceRequestPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateEnvironmentInstanceRequestPayload(val *CreateEnvironmentInstanceRequestPayload) *NullableCreateEnvironmentInstanceRequestPayload {
	return &NullableCreateEnvironmentInstanceRequestPayload{value: val, isSet: true}
}

func (v NullableCreateEnvironmentInstanceRequestPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateEnvironmentInstanceRequestPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
