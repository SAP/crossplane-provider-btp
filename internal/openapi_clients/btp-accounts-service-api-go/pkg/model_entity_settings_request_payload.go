/*
Accounts Service

The Accounts service provides REST APIs that are responsible for the management of global accounts, and the creation and management of directories, subaccounts, and their custom properties/tags.  Global accounts represent a business entity and contain contract information, including customer details and purchased entitlements. The global account is the context for billing each customer.  Use the subaccount APIs to structure your global account according to your organization's and project's requirements regarding members, authorizations, and quotas. This service also provides you with APIs for creating and managing directories. While the use of directories is optional, they allow you to further organize and manage your subaccounts according to your specific technical and business needs. The service also lets you manage the custom properties/tags that you associate with your directories and subaccounts. NOTE: These APIs are relevant only for cloud management tools feature set B. For details and information about whether this applies to your global account, see [Cloud Management Tools - Feature Set Overview](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/caf4e4e23aef4666ad8f125af393dfb2.html).  See also: * [Authorization](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/3670474a58c24ac2b082e76cbbd9dc19.html) * [Rate Limiting](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77b217b3f57a45b987eb7fbc3305ce1e.html) * [Error Response Format](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77fef2fb104b4b1795e2e6cee790e8b8.html) * [Asynchronous Jobs](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/0a0a6ab0ad114d72a6611c1c6b21683e.html)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the EntitySettingsRequestPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntitySettingsRequestPayload{}

// EntitySettingsRequestPayload New and/or updated directory settings.
type EntitySettingsRequestPayload struct {
	// Additional properties for the settings.
	EntitySettings []UpdateEntitySettingsRequestPayload `json:"entitySettings"`
	AdditionalProperties map[string]interface{}
}

type _EntitySettingsRequestPayload EntitySettingsRequestPayload

// NewEntitySettingsRequestPayload instantiates a new EntitySettingsRequestPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntitySettingsRequestPayload(entitySettings []UpdateEntitySettingsRequestPayload) *EntitySettingsRequestPayload {
	this := EntitySettingsRequestPayload{}
	this.EntitySettings = entitySettings
	return &this
}

// NewEntitySettingsRequestPayloadWithDefaults instantiates a new EntitySettingsRequestPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntitySettingsRequestPayloadWithDefaults() *EntitySettingsRequestPayload {
	this := EntitySettingsRequestPayload{}
	return &this
}

// GetEntitySettings returns the EntitySettings field value
func (o *EntitySettingsRequestPayload) GetEntitySettings() []UpdateEntitySettingsRequestPayload {
	if o == nil {
		var ret []UpdateEntitySettingsRequestPayload
		return ret
	}

	return o.EntitySettings
}

// GetEntitySettingsOk returns a tuple with the EntitySettings field value
// and a boolean to check if the value has been set.
func (o *EntitySettingsRequestPayload) GetEntitySettingsOk() ([]UpdateEntitySettingsRequestPayload, bool) {
	if o == nil {
		return nil, false
	}
	return o.EntitySettings, true
}

// SetEntitySettings sets field value
func (o *EntitySettingsRequestPayload) SetEntitySettings(v []UpdateEntitySettingsRequestPayload) {
	o.EntitySettings = v
}

func (o EntitySettingsRequestPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntitySettingsRequestPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entitySettings"] = o.EntitySettings

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EntitySettingsRequestPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entitySettings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEntitySettingsRequestPayload := _EntitySettingsRequestPayload{}

	err = json.Unmarshal(data, &varEntitySettingsRequestPayload)

	if err != nil {
		return err
	}

	*o = EntitySettingsRequestPayload(varEntitySettingsRequestPayload)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "entitySettings")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEntitySettingsRequestPayload struct {
	value *EntitySettingsRequestPayload
	isSet bool
}

func (v NullableEntitySettingsRequestPayload) Get() *EntitySettingsRequestPayload {
	return v.value
}

func (v *NullableEntitySettingsRequestPayload) Set(val *EntitySettingsRequestPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitySettingsRequestPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitySettingsRequestPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitySettingsRequestPayload(val *EntitySettingsRequestPayload) *NullableEntitySettingsRequestPayload {
	return &NullableEntitySettingsRequestPayload{value: val, isSet: true}
}

func (v NullableEntitySettingsRequestPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitySettingsRequestPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


