/*
Accounts Service

The Accounts service provides REST APIs that are responsible for the management of global accounts, and the creation and management of directories, subaccounts, and their custom properties/tags.  Global accounts represent a business entity and contain contract information, including customer details and purchased entitlements. The global account is the context for billing each customer.  Use the subaccount APIs to structure your global account according to your organization's and project's requirements regarding members, authorizations, and quotas. This service also provides you with APIs for creating and managing directories. While the use of directories is optional, they allow you to further organize and manage your subaccounts according to your specific technical and business needs. The service also lets you manage the custom properties/tags that you associate with your directories and subaccounts. NOTE: These APIs are relevant only for cloud management tools feature set B. For details and information about whether this applies to your global account, see [Cloud Management Tools - Feature Set Overview](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/caf4e4e23aef4666ad8f125af393dfb2.html).  See also: * [Authorization](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/3670474a58c24ac2b082e76cbbd9dc19.html) * [Rate Limiting](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77b217b3f57a45b987eb7fbc3305ce1e.html) * [Error Response Format](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77fef2fb104b4b1795e2e6cee790e8b8.html) * [Asynchronous Jobs](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/0a0a6ab0ad114d72a6611c1c6b21683e.html)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the GlobalAccountResponseObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GlobalAccountResponseObject{}

// GlobalAccountResponseObject struct for GlobalAccountResponseObject
type GlobalAccountResponseObject struct {
	// Specifies if global account is backward-compliant for EU access.
	BackwardCompliantEU *bool `json:"backwardCompliantEU,omitempty"`
	// The customer ID of the third-party global account operated by SAP customer global account.  Retrieved from the Custom field of the third party customer's order.
	BpoCustomerId *string `json:"bpoCustomerId,omitempty"`
	// The list of directories associated with the specified global account.
	Children []DirectoryResponseObject `json:"children,omitempty"`
	// The type of the commercial contract that was signed.
	CommercialModel string `json:"commercialModel"`
	// Whether the customer of the global account pays only for services that they actually use (consumption-based) or pay for subscribed services at a fixed cost irrespective of consumption (subscription-based). * <b>TRUE:</b> Consumption-based commercial model. * <b>FALSE:</b> Subscription-based commercial model.
	ConsumptionBased bool `json:"consumptionBased"`
	// The status of the customer contract and its associated root global account. * <b>ACTIVE:</b> The customer contract and its associated global account is currently active. * <b>PENDING_TERMINATION:</b> A termination process has been triggered for a customer contract (the customer contract has expired, or a customer has given notification that they wish to terminate their contract), and the global account is currently in the validation period. The customer can still access their global account until the end of the validation period. * <b>SUSPENDED:</b> For enterprise accounts, specifies that the customer's global account is currently in the grace period of the termination process. Access to the global account by the customer is blocked. No data is deleted until the deletion date is reached at the end of the grace period. For trial accounts, specifies that the account is suspended, and the account owner has not yet extended the trial period.
	ContractStatus *string `json:"contractStatus,omitempty"`
	// The number of the cost center that is charged for the creation and usage of the global account. This is a duplicate property used for backward compatibility; the cost center is also stored in costObjectId. This property must be null if the global account is tied to an internal order or Work Breakdown Structure element.
	CostCenter *string `json:"costCenter,omitempty"`
	// The number or code of the cost center, internal order, or Work Breakdown Structure element that is charged for the creation and usage of the global account. The type of the cost object must be configured in costObjectType.
	CostObjectId *string `json:"costObjectId,omitempty"`
	// The type of accounting assignment object that is associated with the global account owner and used to charge for the creation and usage of the global account. Support types: COST_CENTER, INTERNAL_ORDER, WBS_ELEMENT. The number or code of the specified cost object is defined in costObjectId. For a cost object of type 'cost center', the value is also configured in costCenter for backward compatibility purposes.
	CostObjectType *string `json:"costObjectType,omitempty"`
	// The date the global account was created. Dates and times are in UTC format.
	CreatedDate int64 `json:"createdDate"`
	// The ID of the customer as registered in the CRM system.
	CrmCustomerId *string `json:"crmCustomerId,omitempty"`
	// The ID of the customer tenant as registered in the CRM system.
	CrmTenantId *string `json:"crmTenantId,omitempty"`
	// (Deprecated) Contains information about the labels assigned to a specified global account. This field supports only single values per key and is now replaced by the string array \"labels\", which supports multiple values per key. The \"customProperties\" field returns only the first value of any label key that has multiple values assigned to it.
	// Deprecated
	CustomProperties []PropertyResponseObject `json:"customProperties,omitempty"`
	// A description of the global account.
	Description string `json:"description"`
	// The display name of the global account.
	DisplayName string `json:"displayName"`
	// The current state of the global account. * <b>STARTED:</b> CRUD operation on an entity has started. * <b>CREATING:</b> Creating entity operation is in progress. * <b>UPDATING:</b> Updating entity operation is in progress. * <b>MOVING:</b> Moving entity operation is in progress. * <b>PROCESSING:</b> A series of operations related to the entity is in progress. * <b>DELETING:</b> Deleting entity operation is in progress. * <b>OK:</b> The CRUD operation or series of operations completed successfully. * <b>PENDING_REVIEW:</b> The processing operation has been stopped for reviewing and can be restarted by the operator. * <b>CANCELLED:</b> The operation or processing was canceled by the operator. * <b>CREATION_FAILED:</b> The creation operation failed, and the entity was not created or was created but cannot be used. * <b>UPDATE_FAILED:</b> The update operation failed, and the entity was not updated. * <b>PROCESSING_FAILED:</b> The processing operations failed. * <b>DELETION_FAILED:</b> The delete operation failed, and the entity was not deleted. * <b>MOVE_FAILED:</b> Entity could not be moved to a different location. * <b>MIGRATING:</b> Migrating entity from NEO to CF.
	EntityState *string `json:"entityState,omitempty"`
	// The planned date that the global account expires. This is the same date as the Contract End Date, unless a manual adjustment has been made to the actual expiration date of the global account. Typically, this property is automatically populated only when a formal termination order is received from the CRM system. From a customer perspective, this date marks the start of the grace period, which is typically 30 days before the actual deletion of the account.
	ExpiryDate *int64 `json:"expiryDate,omitempty"`
	// The geographic locations from where the global account can be accessed. * <b>STANDARD:</b> The global account can be accessed from any geographic location. * <b>EU_ACCESS:</b> The global account can be accessed only within locations in the EU.
	GeoAccess string `json:"geoAccess"`
	// The GUID of the directory's global account entity.
	GlobalAccountGUID string `json:"globalAccountGUID"`
	// The unique ID of the global account.
	Guid string `json:"guid"`
	// Contains information about the labels assigned to a specified global account. Labels are represented in a JSON array of key-value pairs; each key has up to 10 corresponding values. This field replaces the deprecated \"customProperties\" field, which supports only single values per key.
	Labels *map[string][]string `json:"labels,omitempty"`
	LegalLinks *LegalLinksDTO `json:"legalLinks,omitempty"`
	// The type of license for the global account. The license type affects the scope of functions of the account. * <b>DEVELOPER:</b> For internal developer global accounts on Staging or Canary landscapes. * <b>CUSTOMER:</b> For customer global accounts. * <b>PARTNER:</b> For partner global accounts. * <b>INTERNAL_DEV:</b> For internal global accounts on the Dev landscape. * <b>INTERNAL_PROD:</b> For internal global accounts on the Live landscape. * <b>TRIAL:</b> For customer trial accounts.
	LicenseType string `json:"licenseType"`
	// The date the global account was last modified. Dates and times are in UTC format.
	ModifiedDate *int64 `json:"modifiedDate,omitempty"`
	// The origin of the account. * <b>ORDER:</b> Created by the Order Processing API or Submit Order wizard. * <b>OPERATOR:</b> Created by the Global Account wizard. * <b>REGION_SETUP:</b> Created automatically as part of the region setup.
	Origin *string `json:"origin,omitempty"`
	// The GUID of the global account's parent entity. Typically this is the global account.
	ParentGUID string `json:"parentGUID"`
	// The Type of the global account's parent entity.
	ParentType string `json:"parentType"`
	// The date that an expired contract was renewed. Dates and times are in UTC format.
	RenewalDate *int64 `json:"renewalDate,omitempty"`
	// For internal accounts, the service for which the global account was created.
	ServiceId *string `json:"serviceId,omitempty"`
	// Information about the state.
	StateMessage *string `json:"stateMessage,omitempty"`
	// The subaccounts contained in the global account.
	Subaccounts []SubaccountResponseObject `json:"subaccounts,omitempty"`
	// Relevant only for entities that require authorization (e.g. global account). The subdomain that becomes part of the path used to access the authorization tenant of the global account. Unique within the defined region.
	Subdomain *string `json:"subdomain,omitempty"`
	// Specifies the current stage of the termination notifications sequence. * <b>PENDING_FIRST_NOTIFICATION:</b> A notification has not yet been sent to the global account owner informing them of the expired contract or termination request. * <b>FIRST_NOTIFICATION_PROCESSED:</b> A first notification has been sent to the global account owner informing them of the expired contract, and the termination date when the global account will be closed. * <b>SECOND_NOTIFICATION_PROCESSED:</b> A follow-up notification has been sent to the global account owner.  Your mail server must be configured so that termination notifications can be sent by the Core Commercialization Foundation service. 
	TerminationNotificationStatus *string `json:"terminationNotificationStatus,omitempty"`
	// For internal accounts, the intended purpose of the global account. Possible purposes: * <b>Development:</b> For development of a service. * <b>Testing:</b> For testing development. * <b>Demo:</b> For creating demos. * <b>Production:</b> For delivering a service in a production landscape.
	UseFor *string `json:"useFor,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GlobalAccountResponseObject GlobalAccountResponseObject

// NewGlobalAccountResponseObject instantiates a new GlobalAccountResponseObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalAccountResponseObject(commercialModel string, consumptionBased bool, createdDate int64, description string, displayName string, geoAccess string, globalAccountGUID string, guid string, licenseType string, parentGUID string, parentType string) *GlobalAccountResponseObject {
	this := GlobalAccountResponseObject{}
	this.CommercialModel = commercialModel
	this.ConsumptionBased = consumptionBased
	this.CreatedDate = createdDate
	this.Description = description
	this.DisplayName = displayName
	this.GeoAccess = geoAccess
	this.GlobalAccountGUID = globalAccountGUID
	this.Guid = guid
	this.LicenseType = licenseType
	this.ParentGUID = parentGUID
	this.ParentType = parentType
	return &this
}

// NewGlobalAccountResponseObjectWithDefaults instantiates a new GlobalAccountResponseObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalAccountResponseObjectWithDefaults() *GlobalAccountResponseObject {
	this := GlobalAccountResponseObject{}
	return &this
}

// GetBackwardCompliantEU returns the BackwardCompliantEU field value if set, zero value otherwise.
func (o *GlobalAccountResponseObject) GetBackwardCompliantEU() bool {
	if o == nil || IsNil(o.BackwardCompliantEU) {
		var ret bool
		return ret
	}
	return *o.BackwardCompliantEU
}

// GetBackwardCompliantEUOk returns a tuple with the BackwardCompliantEU field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetBackwardCompliantEUOk() (*bool, bool) {
	if o == nil || IsNil(o.BackwardCompliantEU) {
		return nil, false
	}
	return o.BackwardCompliantEU, true
}

// HasBackwardCompliantEU returns a boolean if a field has been set.
func (o *GlobalAccountResponseObject) HasBackwardCompliantEU() bool {
	if o != nil && !IsNil(o.BackwardCompliantEU) {
		return true
	}

	return false
}

// SetBackwardCompliantEU gets a reference to the given bool and assigns it to the BackwardCompliantEU field.
func (o *GlobalAccountResponseObject) SetBackwardCompliantEU(v bool) {
	o.BackwardCompliantEU = &v
}

// GetBpoCustomerId returns the BpoCustomerId field value if set, zero value otherwise.
func (o *GlobalAccountResponseObject) GetBpoCustomerId() string {
	if o == nil || IsNil(o.BpoCustomerId) {
		var ret string
		return ret
	}
	return *o.BpoCustomerId
}

// GetBpoCustomerIdOk returns a tuple with the BpoCustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetBpoCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.BpoCustomerId) {
		return nil, false
	}
	return o.BpoCustomerId, true
}

// HasBpoCustomerId returns a boolean if a field has been set.
func (o *GlobalAccountResponseObject) HasBpoCustomerId() bool {
	if o != nil && !IsNil(o.BpoCustomerId) {
		return true
	}

	return false
}

// SetBpoCustomerId gets a reference to the given string and assigns it to the BpoCustomerId field.
func (o *GlobalAccountResponseObject) SetBpoCustomerId(v string) {
	o.BpoCustomerId = &v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *GlobalAccountResponseObject) GetChildren() []DirectoryResponseObject {
	if o == nil || IsNil(o.Children) {
		var ret []DirectoryResponseObject
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetChildrenOk() ([]DirectoryResponseObject, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *GlobalAccountResponseObject) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []DirectoryResponseObject and assigns it to the Children field.
func (o *GlobalAccountResponseObject) SetChildren(v []DirectoryResponseObject) {
	o.Children = v
}

// GetCommercialModel returns the CommercialModel field value
func (o *GlobalAccountResponseObject) GetCommercialModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommercialModel
}

// GetCommercialModelOk returns a tuple with the CommercialModel field value
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetCommercialModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommercialModel, true
}

// SetCommercialModel sets field value
func (o *GlobalAccountResponseObject) SetCommercialModel(v string) {
	o.CommercialModel = v
}

// GetConsumptionBased returns the ConsumptionBased field value
func (o *GlobalAccountResponseObject) GetConsumptionBased() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ConsumptionBased
}

// GetConsumptionBasedOk returns a tuple with the ConsumptionBased field value
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetConsumptionBasedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConsumptionBased, true
}

// SetConsumptionBased sets field value
func (o *GlobalAccountResponseObject) SetConsumptionBased(v bool) {
	o.ConsumptionBased = v
}

// GetContractStatus returns the ContractStatus field value if set, zero value otherwise.
func (o *GlobalAccountResponseObject) GetContractStatus() string {
	if o == nil || IsNil(o.ContractStatus) {
		var ret string
		return ret
	}
	return *o.ContractStatus
}

// GetContractStatusOk returns a tuple with the ContractStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetContractStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ContractStatus) {
		return nil, false
	}
	return o.ContractStatus, true
}

// HasContractStatus returns a boolean if a field has been set.
func (o *GlobalAccountResponseObject) HasContractStatus() bool {
	if o != nil && !IsNil(o.ContractStatus) {
		return true
	}

	return false
}

// SetContractStatus gets a reference to the given string and assigns it to the ContractStatus field.
func (o *GlobalAccountResponseObject) SetContractStatus(v string) {
	o.ContractStatus = &v
}

// GetCostCenter returns the CostCenter field value if set, zero value otherwise.
func (o *GlobalAccountResponseObject) GetCostCenter() string {
	if o == nil || IsNil(o.CostCenter) {
		var ret string
		return ret
	}
	return *o.CostCenter
}

// GetCostCenterOk returns a tuple with the CostCenter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetCostCenterOk() (*string, bool) {
	if o == nil || IsNil(o.CostCenter) {
		return nil, false
	}
	return o.CostCenter, true
}

// HasCostCenter returns a boolean if a field has been set.
func (o *GlobalAccountResponseObject) HasCostCenter() bool {
	if o != nil && !IsNil(o.CostCenter) {
		return true
	}

	return false
}

// SetCostCenter gets a reference to the given string and assigns it to the CostCenter field.
func (o *GlobalAccountResponseObject) SetCostCenter(v string) {
	o.CostCenter = &v
}

// GetCostObjectId returns the CostObjectId field value if set, zero value otherwise.
func (o *GlobalAccountResponseObject) GetCostObjectId() string {
	if o == nil || IsNil(o.CostObjectId) {
		var ret string
		return ret
	}
	return *o.CostObjectId
}

// GetCostObjectIdOk returns a tuple with the CostObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetCostObjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.CostObjectId) {
		return nil, false
	}
	return o.CostObjectId, true
}

// HasCostObjectId returns a boolean if a field has been set.
func (o *GlobalAccountResponseObject) HasCostObjectId() bool {
	if o != nil && !IsNil(o.CostObjectId) {
		return true
	}

	return false
}

// SetCostObjectId gets a reference to the given string and assigns it to the CostObjectId field.
func (o *GlobalAccountResponseObject) SetCostObjectId(v string) {
	o.CostObjectId = &v
}

// GetCostObjectType returns the CostObjectType field value if set, zero value otherwise.
func (o *GlobalAccountResponseObject) GetCostObjectType() string {
	if o == nil || IsNil(o.CostObjectType) {
		var ret string
		return ret
	}
	return *o.CostObjectType
}

// GetCostObjectTypeOk returns a tuple with the CostObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetCostObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CostObjectType) {
		return nil, false
	}
	return o.CostObjectType, true
}

// HasCostObjectType returns a boolean if a field has been set.
func (o *GlobalAccountResponseObject) HasCostObjectType() bool {
	if o != nil && !IsNil(o.CostObjectType) {
		return true
	}

	return false
}

// SetCostObjectType gets a reference to the given string and assigns it to the CostObjectType field.
func (o *GlobalAccountResponseObject) SetCostObjectType(v string) {
	o.CostObjectType = &v
}

// GetCreatedDate returns the CreatedDate field value
func (o *GlobalAccountResponseObject) GetCreatedDate() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetCreatedDateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedDate, true
}

// SetCreatedDate sets field value
func (o *GlobalAccountResponseObject) SetCreatedDate(v int64) {
	o.CreatedDate = v
}

// GetCrmCustomerId returns the CrmCustomerId field value if set, zero value otherwise.
func (o *GlobalAccountResponseObject) GetCrmCustomerId() string {
	if o == nil || IsNil(o.CrmCustomerId) {
		var ret string
		return ret
	}
	return *o.CrmCustomerId
}

// GetCrmCustomerIdOk returns a tuple with the CrmCustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetCrmCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.CrmCustomerId) {
		return nil, false
	}
	return o.CrmCustomerId, true
}

// HasCrmCustomerId returns a boolean if a field has been set.
func (o *GlobalAccountResponseObject) HasCrmCustomerId() bool {
	if o != nil && !IsNil(o.CrmCustomerId) {
		return true
	}

	return false
}

// SetCrmCustomerId gets a reference to the given string and assigns it to the CrmCustomerId field.
func (o *GlobalAccountResponseObject) SetCrmCustomerId(v string) {
	o.CrmCustomerId = &v
}

// GetCrmTenantId returns the CrmTenantId field value if set, zero value otherwise.
func (o *GlobalAccountResponseObject) GetCrmTenantId() string {
	if o == nil || IsNil(o.CrmTenantId) {
		var ret string
		return ret
	}
	return *o.CrmTenantId
}

// GetCrmTenantIdOk returns a tuple with the CrmTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetCrmTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.CrmTenantId) {
		return nil, false
	}
	return o.CrmTenantId, true
}

// HasCrmTenantId returns a boolean if a field has been set.
func (o *GlobalAccountResponseObject) HasCrmTenantId() bool {
	if o != nil && !IsNil(o.CrmTenantId) {
		return true
	}

	return false
}

// SetCrmTenantId gets a reference to the given string and assigns it to the CrmTenantId field.
func (o *GlobalAccountResponseObject) SetCrmTenantId(v string) {
	o.CrmTenantId = &v
}

// GetCustomProperties returns the CustomProperties field value if set, zero value otherwise.
// Deprecated
func (o *GlobalAccountResponseObject) GetCustomProperties() []PropertyResponseObject {
	if o == nil || IsNil(o.CustomProperties) {
		var ret []PropertyResponseObject
		return ret
	}
	return o.CustomProperties
}

// GetCustomPropertiesOk returns a tuple with the CustomProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *GlobalAccountResponseObject) GetCustomPropertiesOk() ([]PropertyResponseObject, bool) {
	if o == nil || IsNil(o.CustomProperties) {
		return nil, false
	}
	return o.CustomProperties, true
}

// HasCustomProperties returns a boolean if a field has been set.
func (o *GlobalAccountResponseObject) HasCustomProperties() bool {
	if o != nil && !IsNil(o.CustomProperties) {
		return true
	}

	return false
}

// SetCustomProperties gets a reference to the given []PropertyResponseObject and assigns it to the CustomProperties field.
// Deprecated
func (o *GlobalAccountResponseObject) SetCustomProperties(v []PropertyResponseObject) {
	o.CustomProperties = v
}

// GetDescription returns the Description field value
func (o *GlobalAccountResponseObject) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *GlobalAccountResponseObject) SetDescription(v string) {
	o.Description = v
}

// GetDisplayName returns the DisplayName field value
func (o *GlobalAccountResponseObject) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *GlobalAccountResponseObject) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetEntityState returns the EntityState field value if set, zero value otherwise.
func (o *GlobalAccountResponseObject) GetEntityState() string {
	if o == nil || IsNil(o.EntityState) {
		var ret string
		return ret
	}
	return *o.EntityState
}

// GetEntityStateOk returns a tuple with the EntityState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetEntityStateOk() (*string, bool) {
	if o == nil || IsNil(o.EntityState) {
		return nil, false
	}
	return o.EntityState, true
}

// HasEntityState returns a boolean if a field has been set.
func (o *GlobalAccountResponseObject) HasEntityState() bool {
	if o != nil && !IsNil(o.EntityState) {
		return true
	}

	return false
}

// SetEntityState gets a reference to the given string and assigns it to the EntityState field.
func (o *GlobalAccountResponseObject) SetEntityState(v string) {
	o.EntityState = &v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *GlobalAccountResponseObject) GetExpiryDate() int64 {
	if o == nil || IsNil(o.ExpiryDate) {
		var ret int64
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetExpiryDateOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpiryDate) {
		return nil, false
	}
	return o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *GlobalAccountResponseObject) HasExpiryDate() bool {
	if o != nil && !IsNil(o.ExpiryDate) {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given int64 and assigns it to the ExpiryDate field.
func (o *GlobalAccountResponseObject) SetExpiryDate(v int64) {
	o.ExpiryDate = &v
}

// GetGeoAccess returns the GeoAccess field value
func (o *GlobalAccountResponseObject) GetGeoAccess() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GeoAccess
}

// GetGeoAccessOk returns a tuple with the GeoAccess field value
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetGeoAccessOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GeoAccess, true
}

// SetGeoAccess sets field value
func (o *GlobalAccountResponseObject) SetGeoAccess(v string) {
	o.GeoAccess = v
}

// GetGlobalAccountGUID returns the GlobalAccountGUID field value
func (o *GlobalAccountResponseObject) GetGlobalAccountGUID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GlobalAccountGUID
}

// GetGlobalAccountGUIDOk returns a tuple with the GlobalAccountGUID field value
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetGlobalAccountGUIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GlobalAccountGUID, true
}

// SetGlobalAccountGUID sets field value
func (o *GlobalAccountResponseObject) SetGlobalAccountGUID(v string) {
	o.GlobalAccountGUID = v
}

// GetGuid returns the Guid field value
func (o *GlobalAccountResponseObject) GetGuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Guid
}

// GetGuidOk returns a tuple with the Guid field value
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Guid, true
}

// SetGuid sets field value
func (o *GlobalAccountResponseObject) SetGuid(v string) {
	o.Guid = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *GlobalAccountResponseObject) GetLabels() map[string][]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string][]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetLabelsOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *GlobalAccountResponseObject) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string][]string and assigns it to the Labels field.
func (o *GlobalAccountResponseObject) SetLabels(v map[string][]string) {
	o.Labels = &v
}

// GetLegalLinks returns the LegalLinks field value if set, zero value otherwise.
func (o *GlobalAccountResponseObject) GetLegalLinks() LegalLinksDTO {
	if o == nil || IsNil(o.LegalLinks) {
		var ret LegalLinksDTO
		return ret
	}
	return *o.LegalLinks
}

// GetLegalLinksOk returns a tuple with the LegalLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetLegalLinksOk() (*LegalLinksDTO, bool) {
	if o == nil || IsNil(o.LegalLinks) {
		return nil, false
	}
	return o.LegalLinks, true
}

// HasLegalLinks returns a boolean if a field has been set.
func (o *GlobalAccountResponseObject) HasLegalLinks() bool {
	if o != nil && !IsNil(o.LegalLinks) {
		return true
	}

	return false
}

// SetLegalLinks gets a reference to the given LegalLinksDTO and assigns it to the LegalLinks field.
func (o *GlobalAccountResponseObject) SetLegalLinks(v LegalLinksDTO) {
	o.LegalLinks = &v
}

// GetLicenseType returns the LicenseType field value
func (o *GlobalAccountResponseObject) GetLicenseType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LicenseType
}

// GetLicenseTypeOk returns a tuple with the LicenseType field value
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetLicenseTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LicenseType, true
}

// SetLicenseType sets field value
func (o *GlobalAccountResponseObject) SetLicenseType(v string) {
	o.LicenseType = v
}

// GetModifiedDate returns the ModifiedDate field value if set, zero value otherwise.
func (o *GlobalAccountResponseObject) GetModifiedDate() int64 {
	if o == nil || IsNil(o.ModifiedDate) {
		var ret int64
		return ret
	}
	return *o.ModifiedDate
}

// GetModifiedDateOk returns a tuple with the ModifiedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetModifiedDateOk() (*int64, bool) {
	if o == nil || IsNil(o.ModifiedDate) {
		return nil, false
	}
	return o.ModifiedDate, true
}

// HasModifiedDate returns a boolean if a field has been set.
func (o *GlobalAccountResponseObject) HasModifiedDate() bool {
	if o != nil && !IsNil(o.ModifiedDate) {
		return true
	}

	return false
}

// SetModifiedDate gets a reference to the given int64 and assigns it to the ModifiedDate field.
func (o *GlobalAccountResponseObject) SetModifiedDate(v int64) {
	o.ModifiedDate = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *GlobalAccountResponseObject) GetOrigin() string {
	if o == nil || IsNil(o.Origin) {
		var ret string
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetOriginOk() (*string, bool) {
	if o == nil || IsNil(o.Origin) {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *GlobalAccountResponseObject) HasOrigin() bool {
	if o != nil && !IsNil(o.Origin) {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given string and assigns it to the Origin field.
func (o *GlobalAccountResponseObject) SetOrigin(v string) {
	o.Origin = &v
}

// GetParentGUID returns the ParentGUID field value
func (o *GlobalAccountResponseObject) GetParentGUID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParentGUID
}

// GetParentGUIDOk returns a tuple with the ParentGUID field value
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetParentGUIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentGUID, true
}

// SetParentGUID sets field value
func (o *GlobalAccountResponseObject) SetParentGUID(v string) {
	o.ParentGUID = v
}

// GetParentType returns the ParentType field value
func (o *GlobalAccountResponseObject) GetParentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParentType
}

// GetParentTypeOk returns a tuple with the ParentType field value
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetParentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentType, true
}

// SetParentType sets field value
func (o *GlobalAccountResponseObject) SetParentType(v string) {
	o.ParentType = v
}

// GetRenewalDate returns the RenewalDate field value if set, zero value otherwise.
func (o *GlobalAccountResponseObject) GetRenewalDate() int64 {
	if o == nil || IsNil(o.RenewalDate) {
		var ret int64
		return ret
	}
	return *o.RenewalDate
}

// GetRenewalDateOk returns a tuple with the RenewalDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetRenewalDateOk() (*int64, bool) {
	if o == nil || IsNil(o.RenewalDate) {
		return nil, false
	}
	return o.RenewalDate, true
}

// HasRenewalDate returns a boolean if a field has been set.
func (o *GlobalAccountResponseObject) HasRenewalDate() bool {
	if o != nil && !IsNil(o.RenewalDate) {
		return true
	}

	return false
}

// SetRenewalDate gets a reference to the given int64 and assigns it to the RenewalDate field.
func (o *GlobalAccountResponseObject) SetRenewalDate(v int64) {
	o.RenewalDate = &v
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *GlobalAccountResponseObject) GetServiceId() string {
	if o == nil || IsNil(o.ServiceId) {
		var ret string
		return ret
	}
	return *o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceId) {
		return nil, false
	}
	return o.ServiceId, true
}

// HasServiceId returns a boolean if a field has been set.
func (o *GlobalAccountResponseObject) HasServiceId() bool {
	if o != nil && !IsNil(o.ServiceId) {
		return true
	}

	return false
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *GlobalAccountResponseObject) SetServiceId(v string) {
	o.ServiceId = &v
}

// GetStateMessage returns the StateMessage field value if set, zero value otherwise.
func (o *GlobalAccountResponseObject) GetStateMessage() string {
	if o == nil || IsNil(o.StateMessage) {
		var ret string
		return ret
	}
	return *o.StateMessage
}

// GetStateMessageOk returns a tuple with the StateMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetStateMessageOk() (*string, bool) {
	if o == nil || IsNil(o.StateMessage) {
		return nil, false
	}
	return o.StateMessage, true
}

// HasStateMessage returns a boolean if a field has been set.
func (o *GlobalAccountResponseObject) HasStateMessage() bool {
	if o != nil && !IsNil(o.StateMessage) {
		return true
	}

	return false
}

// SetStateMessage gets a reference to the given string and assigns it to the StateMessage field.
func (o *GlobalAccountResponseObject) SetStateMessage(v string) {
	o.StateMessage = &v
}

// GetSubaccounts returns the Subaccounts field value if set, zero value otherwise.
func (o *GlobalAccountResponseObject) GetSubaccounts() []SubaccountResponseObject {
	if o == nil || IsNil(o.Subaccounts) {
		var ret []SubaccountResponseObject
		return ret
	}
	return o.Subaccounts
}

// GetSubaccountsOk returns a tuple with the Subaccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetSubaccountsOk() ([]SubaccountResponseObject, bool) {
	if o == nil || IsNil(o.Subaccounts) {
		return nil, false
	}
	return o.Subaccounts, true
}

// HasSubaccounts returns a boolean if a field has been set.
func (o *GlobalAccountResponseObject) HasSubaccounts() bool {
	if o != nil && !IsNil(o.Subaccounts) {
		return true
	}

	return false
}

// SetSubaccounts gets a reference to the given []SubaccountResponseObject and assigns it to the Subaccounts field.
func (o *GlobalAccountResponseObject) SetSubaccounts(v []SubaccountResponseObject) {
	o.Subaccounts = v
}

// GetSubdomain returns the Subdomain field value if set, zero value otherwise.
func (o *GlobalAccountResponseObject) GetSubdomain() string {
	if o == nil || IsNil(o.Subdomain) {
		var ret string
		return ret
	}
	return *o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetSubdomainOk() (*string, bool) {
	if o == nil || IsNil(o.Subdomain) {
		return nil, false
	}
	return o.Subdomain, true
}

// HasSubdomain returns a boolean if a field has been set.
func (o *GlobalAccountResponseObject) HasSubdomain() bool {
	if o != nil && !IsNil(o.Subdomain) {
		return true
	}

	return false
}

// SetSubdomain gets a reference to the given string and assigns it to the Subdomain field.
func (o *GlobalAccountResponseObject) SetSubdomain(v string) {
	o.Subdomain = &v
}

// GetTerminationNotificationStatus returns the TerminationNotificationStatus field value if set, zero value otherwise.
func (o *GlobalAccountResponseObject) GetTerminationNotificationStatus() string {
	if o == nil || IsNil(o.TerminationNotificationStatus) {
		var ret string
		return ret
	}
	return *o.TerminationNotificationStatus
}

// GetTerminationNotificationStatusOk returns a tuple with the TerminationNotificationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetTerminationNotificationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.TerminationNotificationStatus) {
		return nil, false
	}
	return o.TerminationNotificationStatus, true
}

// HasTerminationNotificationStatus returns a boolean if a field has been set.
func (o *GlobalAccountResponseObject) HasTerminationNotificationStatus() bool {
	if o != nil && !IsNil(o.TerminationNotificationStatus) {
		return true
	}

	return false
}

// SetTerminationNotificationStatus gets a reference to the given string and assigns it to the TerminationNotificationStatus field.
func (o *GlobalAccountResponseObject) SetTerminationNotificationStatus(v string) {
	o.TerminationNotificationStatus = &v
}

// GetUseFor returns the UseFor field value if set, zero value otherwise.
func (o *GlobalAccountResponseObject) GetUseFor() string {
	if o == nil || IsNil(o.UseFor) {
		var ret string
		return ret
	}
	return *o.UseFor
}

// GetUseForOk returns a tuple with the UseFor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAccountResponseObject) GetUseForOk() (*string, bool) {
	if o == nil || IsNil(o.UseFor) {
		return nil, false
	}
	return o.UseFor, true
}

// HasUseFor returns a boolean if a field has been set.
func (o *GlobalAccountResponseObject) HasUseFor() bool {
	if o != nil && !IsNil(o.UseFor) {
		return true
	}

	return false
}

// SetUseFor gets a reference to the given string and assigns it to the UseFor field.
func (o *GlobalAccountResponseObject) SetUseFor(v string) {
	o.UseFor = &v
}

func (o GlobalAccountResponseObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GlobalAccountResponseObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BackwardCompliantEU) {
		toSerialize["backwardCompliantEU"] = o.BackwardCompliantEU
	}
	if !IsNil(o.BpoCustomerId) {
		toSerialize["bpoCustomerId"] = o.BpoCustomerId
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	toSerialize["commercialModel"] = o.CommercialModel
	toSerialize["consumptionBased"] = o.ConsumptionBased
	if !IsNil(o.ContractStatus) {
		toSerialize["contractStatus"] = o.ContractStatus
	}
	if !IsNil(o.CostCenter) {
		toSerialize["costCenter"] = o.CostCenter
	}
	if !IsNil(o.CostObjectId) {
		toSerialize["costObjectId"] = o.CostObjectId
	}
	if !IsNil(o.CostObjectType) {
		toSerialize["costObjectType"] = o.CostObjectType
	}
	toSerialize["createdDate"] = o.CreatedDate
	if !IsNil(o.CrmCustomerId) {
		toSerialize["crmCustomerId"] = o.CrmCustomerId
	}
	if !IsNil(o.CrmTenantId) {
		toSerialize["crmTenantId"] = o.CrmTenantId
	}
	if !IsNil(o.CustomProperties) {
		toSerialize["customProperties"] = o.CustomProperties
	}
	toSerialize["description"] = o.Description
	toSerialize["displayName"] = o.DisplayName
	if !IsNil(o.EntityState) {
		toSerialize["entityState"] = o.EntityState
	}
	if !IsNil(o.ExpiryDate) {
		toSerialize["expiryDate"] = o.ExpiryDate
	}
	toSerialize["geoAccess"] = o.GeoAccess
	toSerialize["globalAccountGUID"] = o.GlobalAccountGUID
	toSerialize["guid"] = o.Guid
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.LegalLinks) {
		toSerialize["legalLinks"] = o.LegalLinks
	}
	toSerialize["licenseType"] = o.LicenseType
	if !IsNil(o.ModifiedDate) {
		toSerialize["modifiedDate"] = o.ModifiedDate
	}
	if !IsNil(o.Origin) {
		toSerialize["origin"] = o.Origin
	}
	toSerialize["parentGUID"] = o.ParentGUID
	toSerialize["parentType"] = o.ParentType
	if !IsNil(o.RenewalDate) {
		toSerialize["renewalDate"] = o.RenewalDate
	}
	if !IsNil(o.ServiceId) {
		toSerialize["serviceId"] = o.ServiceId
	}
	if !IsNil(o.StateMessage) {
		toSerialize["stateMessage"] = o.StateMessage
	}
	if !IsNil(o.Subaccounts) {
		toSerialize["subaccounts"] = o.Subaccounts
	}
	if !IsNil(o.Subdomain) {
		toSerialize["subdomain"] = o.Subdomain
	}
	if !IsNil(o.TerminationNotificationStatus) {
		toSerialize["terminationNotificationStatus"] = o.TerminationNotificationStatus
	}
	if !IsNil(o.UseFor) {
		toSerialize["useFor"] = o.UseFor
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GlobalAccountResponseObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"commercialModel",
		"consumptionBased",
		"createdDate",
		"description",
		"displayName",
		"geoAccess",
		"globalAccountGUID",
		"guid",
		"licenseType",
		"parentGUID",
		"parentType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGlobalAccountResponseObject := _GlobalAccountResponseObject{}

	err = json.Unmarshal(data, &varGlobalAccountResponseObject)

	if err != nil {
		return err
	}

	*o = GlobalAccountResponseObject(varGlobalAccountResponseObject)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "backwardCompliantEU")
		delete(additionalProperties, "bpoCustomerId")
		delete(additionalProperties, "children")
		delete(additionalProperties, "commercialModel")
		delete(additionalProperties, "consumptionBased")
		delete(additionalProperties, "contractStatus")
		delete(additionalProperties, "costCenter")
		delete(additionalProperties, "costObjectId")
		delete(additionalProperties, "costObjectType")
		delete(additionalProperties, "createdDate")
		delete(additionalProperties, "crmCustomerId")
		delete(additionalProperties, "crmTenantId")
		delete(additionalProperties, "customProperties")
		delete(additionalProperties, "description")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "entityState")
		delete(additionalProperties, "expiryDate")
		delete(additionalProperties, "geoAccess")
		delete(additionalProperties, "globalAccountGUID")
		delete(additionalProperties, "guid")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "legalLinks")
		delete(additionalProperties, "licenseType")
		delete(additionalProperties, "modifiedDate")
		delete(additionalProperties, "origin")
		delete(additionalProperties, "parentGUID")
		delete(additionalProperties, "parentType")
		delete(additionalProperties, "renewalDate")
		delete(additionalProperties, "serviceId")
		delete(additionalProperties, "stateMessage")
		delete(additionalProperties, "subaccounts")
		delete(additionalProperties, "subdomain")
		delete(additionalProperties, "terminationNotificationStatus")
		delete(additionalProperties, "useFor")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGlobalAccountResponseObject struct {
	value *GlobalAccountResponseObject
	isSet bool
}

func (v NullableGlobalAccountResponseObject) Get() *GlobalAccountResponseObject {
	return v.value
}

func (v *NullableGlobalAccountResponseObject) Set(val *GlobalAccountResponseObject) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalAccountResponseObject) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalAccountResponseObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalAccountResponseObject(val *GlobalAccountResponseObject) *NullableGlobalAccountResponseObject {
	return &NullableGlobalAccountResponseObject{value: val, isSet: true}
}

func (v NullableGlobalAccountResponseObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalAccountResponseObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


