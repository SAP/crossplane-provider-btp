/*
Accounts Service

The Accounts service provides REST APIs that are responsible for the management of global accounts, and the creation and management of directories, subaccounts, and their custom properties/tags.  Global accounts represent a business entity and contain contract information, including customer details and purchased entitlements. The global account is the context for billing each customer.  Use the subaccount APIs to structure your global account according to your organization's and project's requirements regarding members, authorizations, and quotas. This service also provides you with APIs for creating and managing directories. While the use of directories is optional, they allow you to further organize and manage your subaccounts according to your specific technical and business needs. The service also lets you manage the custom properties/tags that you associate with your directories and subaccounts. NOTE: These APIs are relevant only for cloud management tools feature set B. For details and information about whether this applies to your global account, see [Cloud Management Tools - Feature Set Overview](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/caf4e4e23aef4666ad8f125af393dfb2.html).  See also: * [Authorization](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/3670474a58c24ac2b082e76cbbd9dc19.html) * [Rate Limiting](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77b217b3f57a45b987eb7fbc3305ce1e.html) * [Error Response Format](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77fef2fb104b4b1795e2e6cee790e8b8.html) * [Asynchronous Jobs](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/0a0a6ab0ad114d72a6611c1c6b21683e.html)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the DirectoryResponseObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DirectoryResponseObject{}

// DirectoryResponseObject struct for DirectoryResponseObject
type DirectoryResponseObject struct {
	// The response object containing information about the directories.
	Children []DirectoryResponseObject `json:"children,omitempty"`
	// The status of the customer contract and its associated root global account. * <b>ACTIVE:</b> The customer contract and its associated global account is currently active. * <b>PENDING_TERMINATION:</b> A termination process has been triggered for a customer contract (the customer contract has expired, or a customer has given notification that they wish to terminate their contract), and the global account is currently in the validation period. The customer can still access their global account until the end of the validation period. * <b>SUSPENDED:</b> For enterprise accounts, specifies that the customer's global account is currently in the grace period of the termination process. Access to the global account by the customer is blocked. No data is deleted until the deletion date is reached at the end of the grace period. For trial accounts, specifies that the account is suspended, and the account owner has not yet extended the trial period.
	ContractStatus *string `json:"contractStatus,omitempty"`
	// Details of the user that created the directory.
	CreatedBy *string `json:"createdBy,omitempty"`
	// The date the directory was created. Dates and times are in UTC format.
	CreatedDate int64 `json:"createdDate"`
	// Custom properties assigned to the directory as key-value pairs.
	CustomProperties []PropertyResponseObject `json:"customProperties,omitempty"`
	// A description of the directory.
	Description string `json:"description"`
	// <b>The features to be enabled in the directory. The available features are:</b> - <b>DEFAULT</b>: (Mandatory) All directories provide the following basic features: (1) Group and filter subaccounts for reports and filters, (2) monitor usage and costs on a directory level (costs only available for contracts that use the consumption-based commercial model), and (3) set custom properties and tags to the directory for identification and reporting purposes. - <b>ENTITLEMENTS</b>: (Optional) Enables the assignment of a quota for services and applications to the directory from the global account quota for distribution to the subaccounts under this directory.  - <b>AUTHORIZATIONS</b>: (Optional) Allows you to assign users as administrators or viewers of this directory. You must apply this feature in combination with the ENTITLEMENTS feature.   IMPORTANT: Your multi-level account hierarchy can have more than one directory enabled with user authorization and/or entitlement management; however, only one directory in any directory path can have these features enabled. In other words, other directories above or below this directory in the same path can only have the default features specified. If you are not sure which features to enable, we recommend that you set only the default features, and then add features later on as they are needed.  <br/><b>Valid values:</b>  [DEFAULT] [DEFAULT,ENTITLEMENTS] [DEFAULT,ENTITLEMENTS,AUTHORIZATIONS]<br/>
	DirectoryFeatures []string `json:"directoryFeatures"`
	// The display name of the directory.
	DisplayName string `json:"displayName"`
	// The current state of the directory. * <b>STARTED:</b> CRUD operation on an entity has started. * <b>CREATING:</b> Creating entity operation is in progress. * <b>UPDATING:</b> Updating entity operation is in progress. * <b>MOVING:</b> Moving entity operation is in progress. * <b>PROCESSING:</b> A series of operations related to the entity is in progress. * <b>DELETING:</b> Deleting entity operation is in progress. * <b>OK:</b> The CRUD operation or series of operations completed successfully. * <b>PENDING_REVIEW:</b> The processing operation has been stopped for reviewing and can be restarted by the operator. * <b>CANCELLED:</b> The operation or processing was canceled by the operator. * <b>CREATION_FAILED:</b> The creation operation failed, and the entity was not created or was created but cannot be used. * <b>UPDATE_FAILED:</b> The update operation failed, and the entity was not updated. * <b>PROCESSING_FAILED:</b> The processing operations failed. * <b>DELETION_FAILED:</b> The delete operation failed, and the entity was not deleted. * <b>MOVE_FAILED:</b> Entity could not be moved to a different location. * <b>MIGRATING:</b> Migrating entity from NEO to CF.
	EntityState *string `json:"entityState,omitempty"`
	// The GUID of the directory's global account entity.
	GlobalAccountGUID string `json:"globalAccountGUID"`
	// The unique ID of the directory.
	Guid string `json:"guid"`
	// Contains information about the labels assigned to a specified global account. Labels are represented in a JSON array of key-value pairs; each key has up to 10 corresponding values. This field replaces the deprecated \"customProperties\" field, which supports only single values per key.
	Labels *map[string][]string `json:"labels,omitempty"`
	LegalLinks *LegalLinksDTO `json:"legalLinks,omitempty"`
	// The date the directory was last modified. Dates and times are in UTC format.
	ModifiedDate *int64 `json:"modifiedDate,omitempty"`
	// The GUID of the directory's parent entity. Typically this is the global account.
	ParentGUID string `json:"parentGUID"`
	// Information about the state.
	StateMessage *string `json:"stateMessage,omitempty"`
	// The subaccounts contained in the directory.
	Subaccounts []SubaccountResponseObject `json:"subaccounts,omitempty"`
	// Applies only to directories that have the user authorization management feature enabled. The subdomain becomes part of the path used to access the authorization tenant of the directory. Unique within the defined region.
	Subdomain *string `json:"subdomain,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DirectoryResponseObject DirectoryResponseObject

// NewDirectoryResponseObject instantiates a new DirectoryResponseObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDirectoryResponseObject(createdDate int64, description string, directoryFeatures []string, displayName string, globalAccountGUID string, guid string, parentGUID string) *DirectoryResponseObject {
	this := DirectoryResponseObject{}
	this.CreatedDate = createdDate
	this.Description = description
	this.DirectoryFeatures = directoryFeatures
	this.DisplayName = displayName
	this.GlobalAccountGUID = globalAccountGUID
	this.Guid = guid
	this.ParentGUID = parentGUID
	return &this
}

// NewDirectoryResponseObjectWithDefaults instantiates a new DirectoryResponseObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDirectoryResponseObjectWithDefaults() *DirectoryResponseObject {
	this := DirectoryResponseObject{}
	return &this
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *DirectoryResponseObject) GetChildren() []DirectoryResponseObject {
	if o == nil || IsNil(o.Children) {
		var ret []DirectoryResponseObject
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryResponseObject) GetChildrenOk() ([]DirectoryResponseObject, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *DirectoryResponseObject) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []DirectoryResponseObject and assigns it to the Children field.
func (o *DirectoryResponseObject) SetChildren(v []DirectoryResponseObject) {
	o.Children = v
}

// GetContractStatus returns the ContractStatus field value if set, zero value otherwise.
func (o *DirectoryResponseObject) GetContractStatus() string {
	if o == nil || IsNil(o.ContractStatus) {
		var ret string
		return ret
	}
	return *o.ContractStatus
}

// GetContractStatusOk returns a tuple with the ContractStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryResponseObject) GetContractStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ContractStatus) {
		return nil, false
	}
	return o.ContractStatus, true
}

// HasContractStatus returns a boolean if a field has been set.
func (o *DirectoryResponseObject) HasContractStatus() bool {
	if o != nil && !IsNil(o.ContractStatus) {
		return true
	}

	return false
}

// SetContractStatus gets a reference to the given string and assigns it to the ContractStatus field.
func (o *DirectoryResponseObject) SetContractStatus(v string) {
	o.ContractStatus = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *DirectoryResponseObject) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryResponseObject) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *DirectoryResponseObject) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *DirectoryResponseObject) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetCreatedDate returns the CreatedDate field value
func (o *DirectoryResponseObject) GetCreatedDate() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value
// and a boolean to check if the value has been set.
func (o *DirectoryResponseObject) GetCreatedDateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedDate, true
}

// SetCreatedDate sets field value
func (o *DirectoryResponseObject) SetCreatedDate(v int64) {
	o.CreatedDate = v
}

// GetCustomProperties returns the CustomProperties field value if set, zero value otherwise.
func (o *DirectoryResponseObject) GetCustomProperties() []PropertyResponseObject {
	if o == nil || IsNil(o.CustomProperties) {
		var ret []PropertyResponseObject
		return ret
	}
	return o.CustomProperties
}

// GetCustomPropertiesOk returns a tuple with the CustomProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryResponseObject) GetCustomPropertiesOk() ([]PropertyResponseObject, bool) {
	if o == nil || IsNil(o.CustomProperties) {
		return nil, false
	}
	return o.CustomProperties, true
}

// HasCustomProperties returns a boolean if a field has been set.
func (o *DirectoryResponseObject) HasCustomProperties() bool {
	if o != nil && !IsNil(o.CustomProperties) {
		return true
	}

	return false
}

// SetCustomProperties gets a reference to the given []PropertyResponseObject and assigns it to the CustomProperties field.
func (o *DirectoryResponseObject) SetCustomProperties(v []PropertyResponseObject) {
	o.CustomProperties = v
}

// GetDescription returns the Description field value
func (o *DirectoryResponseObject) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *DirectoryResponseObject) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *DirectoryResponseObject) SetDescription(v string) {
	o.Description = v
}

// GetDirectoryFeatures returns the DirectoryFeatures field value
func (o *DirectoryResponseObject) GetDirectoryFeatures() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DirectoryFeatures
}

// GetDirectoryFeaturesOk returns a tuple with the DirectoryFeatures field value
// and a boolean to check if the value has been set.
func (o *DirectoryResponseObject) GetDirectoryFeaturesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DirectoryFeatures, true
}

// SetDirectoryFeatures sets field value
func (o *DirectoryResponseObject) SetDirectoryFeatures(v []string) {
	o.DirectoryFeatures = v
}

// GetDisplayName returns the DisplayName field value
func (o *DirectoryResponseObject) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *DirectoryResponseObject) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *DirectoryResponseObject) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetEntityState returns the EntityState field value if set, zero value otherwise.
func (o *DirectoryResponseObject) GetEntityState() string {
	if o == nil || IsNil(o.EntityState) {
		var ret string
		return ret
	}
	return *o.EntityState
}

// GetEntityStateOk returns a tuple with the EntityState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryResponseObject) GetEntityStateOk() (*string, bool) {
	if o == nil || IsNil(o.EntityState) {
		return nil, false
	}
	return o.EntityState, true
}

// HasEntityState returns a boolean if a field has been set.
func (o *DirectoryResponseObject) HasEntityState() bool {
	if o != nil && !IsNil(o.EntityState) {
		return true
	}

	return false
}

// SetEntityState gets a reference to the given string and assigns it to the EntityState field.
func (o *DirectoryResponseObject) SetEntityState(v string) {
	o.EntityState = &v
}

// GetGlobalAccountGUID returns the GlobalAccountGUID field value
func (o *DirectoryResponseObject) GetGlobalAccountGUID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GlobalAccountGUID
}

// GetGlobalAccountGUIDOk returns a tuple with the GlobalAccountGUID field value
// and a boolean to check if the value has been set.
func (o *DirectoryResponseObject) GetGlobalAccountGUIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GlobalAccountGUID, true
}

// SetGlobalAccountGUID sets field value
func (o *DirectoryResponseObject) SetGlobalAccountGUID(v string) {
	o.GlobalAccountGUID = v
}

// GetGuid returns the Guid field value
func (o *DirectoryResponseObject) GetGuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Guid
}

// GetGuidOk returns a tuple with the Guid field value
// and a boolean to check if the value has been set.
func (o *DirectoryResponseObject) GetGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Guid, true
}

// SetGuid sets field value
func (o *DirectoryResponseObject) SetGuid(v string) {
	o.Guid = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *DirectoryResponseObject) GetLabels() map[string][]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string][]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryResponseObject) GetLabelsOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *DirectoryResponseObject) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string][]string and assigns it to the Labels field.
func (o *DirectoryResponseObject) SetLabels(v map[string][]string) {
	o.Labels = &v
}

// GetLegalLinks returns the LegalLinks field value if set, zero value otherwise.
func (o *DirectoryResponseObject) GetLegalLinks() LegalLinksDTO {
	if o == nil || IsNil(o.LegalLinks) {
		var ret LegalLinksDTO
		return ret
	}
	return *o.LegalLinks
}

// GetLegalLinksOk returns a tuple with the LegalLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryResponseObject) GetLegalLinksOk() (*LegalLinksDTO, bool) {
	if o == nil || IsNil(o.LegalLinks) {
		return nil, false
	}
	return o.LegalLinks, true
}

// HasLegalLinks returns a boolean if a field has been set.
func (o *DirectoryResponseObject) HasLegalLinks() bool {
	if o != nil && !IsNil(o.LegalLinks) {
		return true
	}

	return false
}

// SetLegalLinks gets a reference to the given LegalLinksDTO and assigns it to the LegalLinks field.
func (o *DirectoryResponseObject) SetLegalLinks(v LegalLinksDTO) {
	o.LegalLinks = &v
}

// GetModifiedDate returns the ModifiedDate field value if set, zero value otherwise.
func (o *DirectoryResponseObject) GetModifiedDate() int64 {
	if o == nil || IsNil(o.ModifiedDate) {
		var ret int64
		return ret
	}
	return *o.ModifiedDate
}

// GetModifiedDateOk returns a tuple with the ModifiedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryResponseObject) GetModifiedDateOk() (*int64, bool) {
	if o == nil || IsNil(o.ModifiedDate) {
		return nil, false
	}
	return o.ModifiedDate, true
}

// HasModifiedDate returns a boolean if a field has been set.
func (o *DirectoryResponseObject) HasModifiedDate() bool {
	if o != nil && !IsNil(o.ModifiedDate) {
		return true
	}

	return false
}

// SetModifiedDate gets a reference to the given int64 and assigns it to the ModifiedDate field.
func (o *DirectoryResponseObject) SetModifiedDate(v int64) {
	o.ModifiedDate = &v
}

// GetParentGUID returns the ParentGUID field value
func (o *DirectoryResponseObject) GetParentGUID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParentGUID
}

// GetParentGUIDOk returns a tuple with the ParentGUID field value
// and a boolean to check if the value has been set.
func (o *DirectoryResponseObject) GetParentGUIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentGUID, true
}

// SetParentGUID sets field value
func (o *DirectoryResponseObject) SetParentGUID(v string) {
	o.ParentGUID = v
}

// GetStateMessage returns the StateMessage field value if set, zero value otherwise.
func (o *DirectoryResponseObject) GetStateMessage() string {
	if o == nil || IsNil(o.StateMessage) {
		var ret string
		return ret
	}
	return *o.StateMessage
}

// GetStateMessageOk returns a tuple with the StateMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryResponseObject) GetStateMessageOk() (*string, bool) {
	if o == nil || IsNil(o.StateMessage) {
		return nil, false
	}
	return o.StateMessage, true
}

// HasStateMessage returns a boolean if a field has been set.
func (o *DirectoryResponseObject) HasStateMessage() bool {
	if o != nil && !IsNil(o.StateMessage) {
		return true
	}

	return false
}

// SetStateMessage gets a reference to the given string and assigns it to the StateMessage field.
func (o *DirectoryResponseObject) SetStateMessage(v string) {
	o.StateMessage = &v
}

// GetSubaccounts returns the Subaccounts field value if set, zero value otherwise.
func (o *DirectoryResponseObject) GetSubaccounts() []SubaccountResponseObject {
	if o == nil || IsNil(o.Subaccounts) {
		var ret []SubaccountResponseObject
		return ret
	}
	return o.Subaccounts
}

// GetSubaccountsOk returns a tuple with the Subaccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryResponseObject) GetSubaccountsOk() ([]SubaccountResponseObject, bool) {
	if o == nil || IsNil(o.Subaccounts) {
		return nil, false
	}
	return o.Subaccounts, true
}

// HasSubaccounts returns a boolean if a field has been set.
func (o *DirectoryResponseObject) HasSubaccounts() bool {
	if o != nil && !IsNil(o.Subaccounts) {
		return true
	}

	return false
}

// SetSubaccounts gets a reference to the given []SubaccountResponseObject and assigns it to the Subaccounts field.
func (o *DirectoryResponseObject) SetSubaccounts(v []SubaccountResponseObject) {
	o.Subaccounts = v
}

// GetSubdomain returns the Subdomain field value if set, zero value otherwise.
func (o *DirectoryResponseObject) GetSubdomain() string {
	if o == nil || IsNil(o.Subdomain) {
		var ret string
		return ret
	}
	return *o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryResponseObject) GetSubdomainOk() (*string, bool) {
	if o == nil || IsNil(o.Subdomain) {
		return nil, false
	}
	return o.Subdomain, true
}

// HasSubdomain returns a boolean if a field has been set.
func (o *DirectoryResponseObject) HasSubdomain() bool {
	if o != nil && !IsNil(o.Subdomain) {
		return true
	}

	return false
}

// SetSubdomain gets a reference to the given string and assigns it to the Subdomain field.
func (o *DirectoryResponseObject) SetSubdomain(v string) {
	o.Subdomain = &v
}

func (o DirectoryResponseObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DirectoryResponseObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !IsNil(o.ContractStatus) {
		toSerialize["contractStatus"] = o.ContractStatus
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	toSerialize["createdDate"] = o.CreatedDate
	if !IsNil(o.CustomProperties) {
		toSerialize["customProperties"] = o.CustomProperties
	}
	toSerialize["description"] = o.Description
	toSerialize["directoryFeatures"] = o.DirectoryFeatures
	toSerialize["displayName"] = o.DisplayName
	if !IsNil(o.EntityState) {
		toSerialize["entityState"] = o.EntityState
	}
	toSerialize["globalAccountGUID"] = o.GlobalAccountGUID
	toSerialize["guid"] = o.Guid
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.LegalLinks) {
		toSerialize["legalLinks"] = o.LegalLinks
	}
	if !IsNil(o.ModifiedDate) {
		toSerialize["modifiedDate"] = o.ModifiedDate
	}
	toSerialize["parentGUID"] = o.ParentGUID
	if !IsNil(o.StateMessage) {
		toSerialize["stateMessage"] = o.StateMessage
	}
	if !IsNil(o.Subaccounts) {
		toSerialize["subaccounts"] = o.Subaccounts
	}
	if !IsNil(o.Subdomain) {
		toSerialize["subdomain"] = o.Subdomain
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DirectoryResponseObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdDate",
		"description",
		"directoryFeatures",
		"displayName",
		"globalAccountGUID",
		"guid",
		"parentGUID",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDirectoryResponseObject := _DirectoryResponseObject{}

	err = json.Unmarshal(data, &varDirectoryResponseObject)

	if err != nil {
		return err
	}

	*o = DirectoryResponseObject(varDirectoryResponseObject)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "children")
		delete(additionalProperties, "contractStatus")
		delete(additionalProperties, "createdBy")
		delete(additionalProperties, "createdDate")
		delete(additionalProperties, "customProperties")
		delete(additionalProperties, "description")
		delete(additionalProperties, "directoryFeatures")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "entityState")
		delete(additionalProperties, "globalAccountGUID")
		delete(additionalProperties, "guid")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "legalLinks")
		delete(additionalProperties, "modifiedDate")
		delete(additionalProperties, "parentGUID")
		delete(additionalProperties, "stateMessage")
		delete(additionalProperties, "subaccounts")
		delete(additionalProperties, "subdomain")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDirectoryResponseObject struct {
	value *DirectoryResponseObject
	isSet bool
}

func (v NullableDirectoryResponseObject) Get() *DirectoryResponseObject {
	return v.value
}

func (v *NullableDirectoryResponseObject) Set(val *DirectoryResponseObject) {
	v.value = val
	v.isSet = true
}

func (v NullableDirectoryResponseObject) IsSet() bool {
	return v.isSet
}

func (v *NullableDirectoryResponseObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDirectoryResponseObject(val *DirectoryResponseObject) *NullableDirectoryResponseObject {
	return &NullableDirectoryResponseObject{value: val, isSet: true}
}

func (v NullableDirectoryResponseObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDirectoryResponseObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


