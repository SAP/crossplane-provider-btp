/*
Entitlements Service

The Entitlements service provides REST APIs that manage the assignments of entitlements and quotas to subaccounts and directories.   Entitlements and their quota are automatically assigned to the global account when a customer order is fulfilled. Use the APIs in this service to manage the distribution of this global quota to your directories and subaccounts.   NOTE: These APIs are relevant only for cloud management tools feature set B. For details and information about whether this applies to your global account, see [Cloud Management Tools - Feature Set Overview](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/Cloud/en-US/caf4e4e23aef4666ad8f125af393dfb2.html).  See also: * [Authorization](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/3670474a58c24ac2b082e76cbbd9dc19.html) * [Rate Limiting](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77b217b3f57a45b987eb7fbc3305ce1e.html) * [Error Response Format](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/77fef2fb104b4b1795e2e6cee790e8b8.html) * [Asynchronous Jobs](https://help.sap.com/viewer/65de2977205c403bbc107264b8eccf4b/latest/en-US/0a0a6ab0ad114d72a6611c1c6b21683e.html)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ServicePlanAssignmentRequestPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicePlanAssignmentRequestPayload{}

// ServicePlanAssignmentRequestPayload Contains information about the plans to assign to a subaccount.
type ServicePlanAssignmentRequestPayload struct {
	// List of assigned entitlements and their specifications.
	AssignmentInfo []SubaccountServicePlanRequestPayload `json:"assignmentInfo"`
	// The technical name of the entitlement to assign to a subaccount.
	ServiceName string `json:"serviceName"`
	// The technical name of the entitlement's plan.
	ServicePlanName string `json:"servicePlanName"`
	// The unique identifier of the entitlement's plan. As obtained in the GET assignments endpoint.
	ServicePlanUniqueIdentifier *string `json:"servicePlanUniqueIdentifier,omitempty"`
}

type _ServicePlanAssignmentRequestPayload ServicePlanAssignmentRequestPayload

// NewServicePlanAssignmentRequestPayload instantiates a new ServicePlanAssignmentRequestPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicePlanAssignmentRequestPayload(assignmentInfo []SubaccountServicePlanRequestPayload, serviceName string, servicePlanName string) *ServicePlanAssignmentRequestPayload {
	this := ServicePlanAssignmentRequestPayload{}
	this.AssignmentInfo = assignmentInfo
	this.ServiceName = serviceName
	this.ServicePlanName = servicePlanName
	return &this
}

// NewServicePlanAssignmentRequestPayloadWithDefaults instantiates a new ServicePlanAssignmentRequestPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicePlanAssignmentRequestPayloadWithDefaults() *ServicePlanAssignmentRequestPayload {
	this := ServicePlanAssignmentRequestPayload{}
	return &this
}

// GetAssignmentInfo returns the AssignmentInfo field value
func (o *ServicePlanAssignmentRequestPayload) GetAssignmentInfo() []SubaccountServicePlanRequestPayload {
	if o == nil {
		var ret []SubaccountServicePlanRequestPayload
		return ret
	}

	return o.AssignmentInfo
}

// GetAssignmentInfoOk returns a tuple with the AssignmentInfo field value
// and a boolean to check if the value has been set.
func (o *ServicePlanAssignmentRequestPayload) GetAssignmentInfoOk() ([]SubaccountServicePlanRequestPayload, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssignmentInfo, true
}

// SetAssignmentInfo sets field value
func (o *ServicePlanAssignmentRequestPayload) SetAssignmentInfo(v []SubaccountServicePlanRequestPayload) {
	o.AssignmentInfo = v
}

// GetServiceName returns the ServiceName field value
func (o *ServicePlanAssignmentRequestPayload) GetServiceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value
// and a boolean to check if the value has been set.
func (o *ServicePlanAssignmentRequestPayload) GetServiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceName, true
}

// SetServiceName sets field value
func (o *ServicePlanAssignmentRequestPayload) SetServiceName(v string) {
	o.ServiceName = v
}

// GetServicePlanName returns the ServicePlanName field value
func (o *ServicePlanAssignmentRequestPayload) GetServicePlanName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServicePlanName
}

// GetServicePlanNameOk returns a tuple with the ServicePlanName field value
// and a boolean to check if the value has been set.
func (o *ServicePlanAssignmentRequestPayload) GetServicePlanNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServicePlanName, true
}

// SetServicePlanName sets field value
func (o *ServicePlanAssignmentRequestPayload) SetServicePlanName(v string) {
	o.ServicePlanName = v
}

// GetServicePlanUniqueIdentifier returns the ServicePlanUniqueIdentifier field value if set, zero value otherwise.
func (o *ServicePlanAssignmentRequestPayload) GetServicePlanUniqueIdentifier() string {
	if o == nil || IsNil(o.ServicePlanUniqueIdentifier) {
		var ret string
		return ret
	}
	return *o.ServicePlanUniqueIdentifier
}

// GetServicePlanUniqueIdentifierOk returns a tuple with the ServicePlanUniqueIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePlanAssignmentRequestPayload) GetServicePlanUniqueIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.ServicePlanUniqueIdentifier) {
		return nil, false
	}
	return o.ServicePlanUniqueIdentifier, true
}

// HasServicePlanUniqueIdentifier returns a boolean if a field has been set.
func (o *ServicePlanAssignmentRequestPayload) HasServicePlanUniqueIdentifier() bool {
	if o != nil && !IsNil(o.ServicePlanUniqueIdentifier) {
		return true
	}

	return false
}

// SetServicePlanUniqueIdentifier gets a reference to the given string and assigns it to the ServicePlanUniqueIdentifier field.
func (o *ServicePlanAssignmentRequestPayload) SetServicePlanUniqueIdentifier(v string) {
	o.ServicePlanUniqueIdentifier = &v
}

func (o ServicePlanAssignmentRequestPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicePlanAssignmentRequestPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assignmentInfo"] = o.AssignmentInfo
	toSerialize["serviceName"] = o.ServiceName
	toSerialize["servicePlanName"] = o.ServicePlanName
	if !IsNil(o.ServicePlanUniqueIdentifier) {
		toSerialize["servicePlanUniqueIdentifier"] = o.ServicePlanUniqueIdentifier
	}
	return toSerialize, nil
}

func (o *ServicePlanAssignmentRequestPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assignmentInfo",
		"serviceName",
		"servicePlanName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServicePlanAssignmentRequestPayload := _ServicePlanAssignmentRequestPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServicePlanAssignmentRequestPayload)

	if err != nil {
		return err
	}

	*o = ServicePlanAssignmentRequestPayload(varServicePlanAssignmentRequestPayload)

	return err
}

type NullableServicePlanAssignmentRequestPayload struct {
	value *ServicePlanAssignmentRequestPayload
	isSet bool
}

func (v NullableServicePlanAssignmentRequestPayload) Get() *ServicePlanAssignmentRequestPayload {
	return v.value
}

func (v *NullableServicePlanAssignmentRequestPayload) Set(val *ServicePlanAssignmentRequestPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableServicePlanAssignmentRequestPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableServicePlanAssignmentRequestPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicePlanAssignmentRequestPayload(val *ServicePlanAssignmentRequestPayload) *NullableServicePlanAssignmentRequestPayload {
	return &NullableServicePlanAssignmentRequestPayload{value: val, isSet: true}
}

func (v NullableServicePlanAssignmentRequestPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicePlanAssignmentRequestPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


