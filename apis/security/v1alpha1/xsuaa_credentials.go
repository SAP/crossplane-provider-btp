package v1alpha1

import (
	"encoding/json"

	corev1 "k8s.io/api/core/v1"

	"github.com/pkg/errors"
)

var ErrInvalidXsuaaCredentials = errors.New("invalid xsuaa api credentials")

// XsuaaBinding defines the json structure stored in secret to configure xsuaa api client
type XsuaaBinding struct {
	ClientId     string `json:"clientid"`
	ClientSecret string `json:"clientsecret"`
	TokenURL     string `json:"tokenurl"`
	ApiUrl       string `json:"apiurl"`
}

func ReadXsuaaCredentialsCustom(creds []byte) (*XsuaaBinding, error) {
	var binding = &XsuaaBinding{}
	if err := json.Unmarshal(creds, &binding); err != nil {
		return binding, ErrInvalidXsuaaCredentials
	}
	if binding.ClientId == "" || binding.ClientSecret == "" || binding.TokenURL == "" || binding.ApiUrl == "" {
		return binding, ErrInvalidXsuaaCredentials
	}
	return binding, nil
}

func ReadXsuaaCredentialsUpjet(creds corev1.Secret) (*XsuaaBinding, error) {
	var binding = &XsuaaBinding{}
	if creds.Data == nil {
		return nil, ErrInvalidXsuaaCredentials
	}
	// These keys are generated by upjet look into config.go if you want to change them
	apiUrl, ok := creds.Data["attribute.api_url"]
	if !ok {
		return nil, ErrInvalidXsuaaCredentials
	}
	clientId, ok := creds.Data["attribute.client_id"]
	if !ok {
		return nil, ErrInvalidXsuaaCredentials
	}
	clientSecret, ok := creds.Data["attribute.client_secret"]
	if !ok {
		return nil, ErrInvalidXsuaaCredentials
	}
	tokenUrl, ok := creds.Data["attribute.token_url"]
	if !ok {
		return nil, ErrInvalidXsuaaCredentials
	}

	binding.ApiUrl = string(apiUrl)
	binding.ClientId = string(clientId)
	binding.ClientSecret = string(clientSecret)
	binding.TokenURL = string(tokenUrl)

	return binding, nil
}
