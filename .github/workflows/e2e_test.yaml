# Enviroment variables/secrets that are needed
# CLI_SERVER_URL contains the CLI server URL
# GLOBAL_ACCOUNT contains the subdomain of the global account
# IDP_URL contains the URL of an IDP that can be connected to the global account
# SECOND_DIRECTORY_ADMIN_EMAIL contains a second email (different from the technical user's email) for the directory
# CIS_CENTRAL_BINDING contents from the service binding of a `cis-central` service
# BTP_TECHNICAL_USER
# TECHNICAL_USER_EMAIL contains the email of the BTP_TECHNICAL_USER
# More information in the README.md

name: E2E Test

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      checkout-ref:
        description: 'the ref for the repo checkout step'
        default: ''
        required: false
        type: string
      environment:
        description: 'the environment to run in'
        default: 'pr-e2e-approval'
        required: false
        type: string
    secrets:
      CLI_SERVER_URL:
        description: contains the CLI server URL
        required: true
      GLOBAL_ACCOUNT:
        description: contains the subdomain of the global account
        required: true
      IDP_URL:
        description: contains the URL of an IDP that can be connected to the global account
        required: true
      SECOND_DIRECTORY_ADMIN_EMAIL:
        description: contains a second email (different from the technical user's email) for the directory
        required: true
      CIS_CENTRAL_BINDING:
        description: contents from the service binding of a `cis-central` service
        required: true
      BTP_TECHNICAL_USER:
        required: true
      TECHNICAL_USER_EMAIL:
        description: contains the email of the BTP_TECHNICAL_USER
        required: true

permissions:
  contents: read

env:
  # hardcoded BTP CLI version
  btp_cli_version: 2.64.0

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      test-names: ${{ steps.set-matrix.outputs.test-names }}
    steps:
      - name: checkout repo
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          #use inputs.checkout-ref to be able to call it from a pull_request_target workflow, since there it needs to be github.event.pull_request.merge_commit_sha and not the default
          ref: ${{ inputs.checkout-ref }}
          
      - name: Set matrix with test names
        id: set-matrix
        run: |
          echo "test-names=$(grep -rh --include='**_test.go' -o -E 'func (Test[A-Za-z0-9_]+)\(t \*testing.T\)' test/e2e | sed 's/func //;s/(t \*testing.T)//' | jq -R . | jq -cs .)" >> $GITHUB_OUTPUT

      - name: Print test names
        run: | 
          echo "Test names: ${{ steps.set-matrix.outputs.test-names }}"

  e2e-test:
    runs-on: ubuntu-latest
    needs: prepare-matrix
    environment: ${{ inputs.environment }}
    strategy:
      fail-fast: false
      matrix:
        testName: ${{ fromJson(needs.prepare-matrix.outputs.test-names) }}
    steps:
      - name: checkout repo
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          #use inputs.checkout-ref to be able to call it from a pull_request_target workflow, since there it needs to be github.event.pull_request.merge_commit_sha and not the default
          ref: ${{ inputs.checkout-ref }}
          submodules: true

      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: '1.21'
      - run: go version

      - name: Install Helm
        run: |
          curl -fsSL https://packages.buildkite.com/helm-linux/helm-debian/gpgkey | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
          sudo apt-get install apt-transport-https --yes
          echo "deb [signed-by=/usr/share/keyrings/helm.gpg] https://packages.buildkite.com/helm-linux/helm-debian/any/ any main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
          sudo apt-get update
          sudo apt-get install -y helm

      - name: Install BTP CLI
      #hardcoded version
        run: |
          curl -LJO https://tools.hana.ondemand.com/additional/btp-cli-linux-amd64-$btp_cli_version.tar.gz --cookie "eula_3_2_agreed=tools.hana.ondemand.com/developer-license-3_2.txt"
          tar -xzf btp-cli-linux-amd64-$btp_cli_version.tar.gz
          cd linux-amd64
          mv btp /usr/local/bin

      - name: Set BUILD_ID
        run: |
          echo "BUILD_ID=${{github.run_number}}" >> $GITHUB_ENV

      - name: Install gettext for envsubst
        run: sudo apt-get update && sudo apt-get install -y gettext

      - name: Run e2e test
        timeout-minutes: 120
        run: |
          make test-e2e-long testFilter=${{ matrix.testName }}
        env:
          BUILD_ID: ${{ env.BUILD_ID }}
          CIS_CENTRAL_BINDING: ${{ secrets.CIS_CENTRAL_BINDING }}
          BTP_TECHNICAL_USER: ${{ secrets.BTP_TECHNICAL_USER }}
          CLI_SERVER_URL: ${{ secrets.CLI_SERVER_URL }}
          GLOBAL_ACCOUNT: ${{ secrets.GLOBAL_ACCOUNT }}
          TECHNICAL_USER_EMAIL: ${{ secrets.TECHNICAL_USER_EMAIL }}
          SECOND_DIRECTORY_ADMIN_EMAIL: ${{ secrets.SECOND_DIRECTORY_ADMIN_EMAIL }}
          IDP_URL: ${{ secrets.IDP_URL }}

  cleanup-e2e:
    runs-on: ubuntu-latest
    needs: e2e-test
    if: always()
    environment: ${{ inputs.environment }}
    steps:
      - name: checkout repo
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
        with:
          # use github.base_ref to checkout the base branch, since the cleanup should always run on the base branch to make it harder for malicious code execution. Consequently, this will not pick up changes to the cleanup.go file in the PR, but that is accebtable.
          ref: ${{ github.base_ref }}
          submodules: true

      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5
        with:
          go-version: '1.21'

      - name: Install BTP CLI
        run: |
          curl -LJO https://tools.hana.ondemand.com/additional/btp-cli-linux-amd64-$btp_cli_version.tar.gz --cookie "eula_3_2_agreed=tools.hana.ondemand.com/developer-license-3_2.txt"
          tar -xzf btp-cli-linux-amd64-$btp_cli_version.tar.gz
          cd linux-amd64
          mv btp /usr/local/bin

      - name: Set BUILD_ID
        run: echo "BUILD_ID=${{ github.run_number }}" >> $GITHUB_ENV

      - name: clean up cluster
        run: |
          go run .github/workflows/cleanup.go
        env:
          BUILD_ID: ${{ env.BUILD_ID }}
          CIS_CENTRAL_BINDING: ${{ secrets.CIS_CENTRAL_BINDING }}
          BTP_TECHNICAL_USER: ${{ secrets.BTP_TECHNICAL_USER }}
          CLI_SERVER_URL: ${{ secrets.CLI_SERVER_URL }}
          GLOBAL_ACCOUNT: ${{ secrets.GLOBAL_ACCOUNT }}
